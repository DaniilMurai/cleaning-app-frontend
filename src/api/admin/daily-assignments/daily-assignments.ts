/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Neuer Standard Admin API
 * OpenAPI spec version: 0.1.0
 */
import {
	useInfiniteQuery,
	useMutation,
	useQuery,
	useSuspenseInfiniteQuery,
	useSuspenseQuery,
} from "@tanstack/react-query";
import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseInfiniteQueryResult,
	DefinedUseQueryResult,
	InfiniteData,
	MutationFunction,
	QueryClient,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseInfiniteQueryOptions,
	UseInfiniteQueryResult,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
	UseSuspenseInfiniteQueryOptions,
	UseSuspenseInfiniteQueryResult,
	UseSuspenseQueryOptions,
	UseSuspenseQueryResult,
} from "@tanstack/react-query";

import type {
	DailyAssignmentCreate,
	DailyAssignmentResponse,
	DailyAssignmentUpdate,
	DeleteDailyAssignmentParams,
	DeleteDailyAssignmentsGroupParams,
	EditDailyAssignmentParams,
	GetDailyAssignmentsParams,
	HTTPValidationError,
	SuccessResponse,
} from ".././schemas";

import { getAxios } from "../../instance";
import type { ErrorType } from "../../instance";

/**
 * @summary Get Daily Assignments
 */
export const getDailyAssignments = (params?: GetDailyAssignmentsParams, signal?: AbortSignal) => {
	return getAxios<DailyAssignmentResponse[]>({
		url: `/admin/daily-assignments/`,
		method: "GET",
		params,
		signal,
	});
};

export const getGetDailyAssignmentsQueryKey = (params?: GetDailyAssignmentsParams) => {
	return [`/admin/daily-assignments/`, ...(params ? [params] : [])] as const;
};

export const getGetDailyAssignmentsInfiniteQueryOptions = <
	TData = InfiniteData<
		Awaited<ReturnType<typeof getDailyAssignments>>,
		GetDailyAssignmentsParams["offset"]
	>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetDailyAssignmentsParams,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getDailyAssignments>>,
				TError,
				TData,
				Awaited<ReturnType<typeof getDailyAssignments>>,
				QueryKey,
				GetDailyAssignmentsParams["offset"]
			>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetDailyAssignmentsQueryKey(params);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof getDailyAssignments>>,
		QueryKey,
		GetDailyAssignmentsParams["offset"]
	> = ({ signal, pageParam }) =>
		getDailyAssignments({ ...params, offset: pageParam || params?.["offset"] }, signal);

	return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
		Awaited<ReturnType<typeof getDailyAssignments>>,
		TError,
		TData,
		Awaited<ReturnType<typeof getDailyAssignments>>,
		QueryKey,
		GetDailyAssignmentsParams["offset"]
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetDailyAssignmentsInfiniteQueryResult = NonNullable<
	Awaited<ReturnType<typeof getDailyAssignments>>
>;
export type GetDailyAssignmentsInfiniteQueryError = ErrorType<HTTPValidationError>;

export function useGetDailyAssignmentsInfinite<
	TData = InfiniteData<
		Awaited<ReturnType<typeof getDailyAssignments>>,
		GetDailyAssignmentsParams["offset"]
	>,
	TError = ErrorType<HTTPValidationError>,
>(
	params: undefined | GetDailyAssignmentsParams,
	options: {
		query: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getDailyAssignments>>,
				TError,
				TData,
				Awaited<ReturnType<typeof getDailyAssignments>>,
				QueryKey,
				GetDailyAssignmentsParams["offset"]
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getDailyAssignments>>,
					TError,
					Awaited<ReturnType<typeof getDailyAssignments>>,
					QueryKey
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetDailyAssignmentsInfinite<
	TData = InfiniteData<
		Awaited<ReturnType<typeof getDailyAssignments>>,
		GetDailyAssignmentsParams["offset"]
	>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetDailyAssignmentsParams,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getDailyAssignments>>,
				TError,
				TData,
				Awaited<ReturnType<typeof getDailyAssignments>>,
				QueryKey,
				GetDailyAssignmentsParams["offset"]
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getDailyAssignments>>,
					TError,
					Awaited<ReturnType<typeof getDailyAssignments>>,
					QueryKey
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetDailyAssignmentsInfinite<
	TData = InfiniteData<
		Awaited<ReturnType<typeof getDailyAssignments>>,
		GetDailyAssignmentsParams["offset"]
	>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetDailyAssignmentsParams,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getDailyAssignments>>,
				TError,
				TData,
				Awaited<ReturnType<typeof getDailyAssignments>>,
				QueryKey,
				GetDailyAssignmentsParams["offset"]
			>
		>;
	},
	queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Daily Assignments
 */

export function useGetDailyAssignmentsInfinite<
	TData = InfiniteData<
		Awaited<ReturnType<typeof getDailyAssignments>>,
		GetDailyAssignmentsParams["offset"]
	>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetDailyAssignmentsParams,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getDailyAssignments>>,
				TError,
				TData,
				Awaited<ReturnType<typeof getDailyAssignments>>,
				QueryKey,
				GetDailyAssignmentsParams["offset"]
			>
		>;
	},
	queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getGetDailyAssignmentsInfiniteQueryOptions(params, options);

	const query = useInfiniteQuery(queryOptions, queryClient) as UseInfiniteQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getGetDailyAssignmentsQueryOptions = <
	TData = Awaited<ReturnType<typeof getDailyAssignments>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetDailyAssignmentsParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getDailyAssignments>>, TError, TData>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetDailyAssignmentsQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getDailyAssignments>>> = ({ signal }) =>
		getDailyAssignments(params, signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getDailyAssignments>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetDailyAssignmentsQueryResult = NonNullable<
	Awaited<ReturnType<typeof getDailyAssignments>>
>;
export type GetDailyAssignmentsQueryError = ErrorType<HTTPValidationError>;

export function useGetDailyAssignments<
	TData = Awaited<ReturnType<typeof getDailyAssignments>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params: undefined | GetDailyAssignmentsParams,
	options: {
		query: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getDailyAssignments>>, TError, TData>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getDailyAssignments>>,
					TError,
					Awaited<ReturnType<typeof getDailyAssignments>>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetDailyAssignments<
	TData = Awaited<ReturnType<typeof getDailyAssignments>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetDailyAssignmentsParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getDailyAssignments>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getDailyAssignments>>,
					TError,
					Awaited<ReturnType<typeof getDailyAssignments>>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetDailyAssignments<
	TData = Awaited<ReturnType<typeof getDailyAssignments>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetDailyAssignmentsParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getDailyAssignments>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Daily Assignments
 */

export function useGetDailyAssignments<
	TData = Awaited<ReturnType<typeof getDailyAssignments>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetDailyAssignmentsParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getDailyAssignments>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getGetDailyAssignmentsQueryOptions(params, options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getGetDailyAssignmentsSuspenseQueryOptions = <
	TData = Awaited<ReturnType<typeof getDailyAssignments>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetDailyAssignmentsParams,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getDailyAssignments>>, TError, TData>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetDailyAssignmentsQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getDailyAssignments>>> = ({ signal }) =>
		getDailyAssignments(params, signal);

	return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
		Awaited<ReturnType<typeof getDailyAssignments>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetDailyAssignmentsSuspenseQueryResult = NonNullable<
	Awaited<ReturnType<typeof getDailyAssignments>>
>;
export type GetDailyAssignmentsSuspenseQueryError = ErrorType<HTTPValidationError>;

export function useGetDailyAssignmentsSuspense<
	TData = Awaited<ReturnType<typeof getDailyAssignments>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params: undefined | GetDailyAssignmentsParams,
	options: {
		query: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getDailyAssignments>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetDailyAssignmentsSuspense<
	TData = Awaited<ReturnType<typeof getDailyAssignments>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetDailyAssignmentsParams,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getDailyAssignments>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetDailyAssignmentsSuspense<
	TData = Awaited<ReturnType<typeof getDailyAssignments>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetDailyAssignmentsParams,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getDailyAssignments>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Daily Assignments
 */

export function useGetDailyAssignmentsSuspense<
	TData = Awaited<ReturnType<typeof getDailyAssignments>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetDailyAssignmentsParams,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getDailyAssignments>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getGetDailyAssignmentsSuspenseQueryOptions(params, options);

	const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getGetDailyAssignmentsSuspenseInfiniteQueryOptions = <
	TData = InfiniteData<
		Awaited<ReturnType<typeof getDailyAssignments>>,
		GetDailyAssignmentsParams["offset"]
	>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetDailyAssignmentsParams,
	options?: {
		query?: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getDailyAssignments>>,
				TError,
				TData,
				Awaited<ReturnType<typeof getDailyAssignments>>,
				QueryKey,
				GetDailyAssignmentsParams["offset"]
			>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetDailyAssignmentsQueryKey(params);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof getDailyAssignments>>,
		QueryKey,
		GetDailyAssignmentsParams["offset"]
	> = ({ signal, pageParam }) =>
		getDailyAssignments({ ...params, offset: pageParam || params?.["offset"] }, signal);

	return { queryKey, queryFn, ...queryOptions } as UseSuspenseInfiniteQueryOptions<
		Awaited<ReturnType<typeof getDailyAssignments>>,
		TError,
		TData,
		Awaited<ReturnType<typeof getDailyAssignments>>,
		QueryKey,
		GetDailyAssignmentsParams["offset"]
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetDailyAssignmentsSuspenseInfiniteQueryResult = NonNullable<
	Awaited<ReturnType<typeof getDailyAssignments>>
>;
export type GetDailyAssignmentsSuspenseInfiniteQueryError = ErrorType<HTTPValidationError>;

export function useGetDailyAssignmentsSuspenseInfinite<
	TData = InfiniteData<
		Awaited<ReturnType<typeof getDailyAssignments>>,
		GetDailyAssignmentsParams["offset"]
	>,
	TError = ErrorType<HTTPValidationError>,
>(
	params: undefined | GetDailyAssignmentsParams,
	options: {
		query: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getDailyAssignments>>,
				TError,
				TData,
				Awaited<ReturnType<typeof getDailyAssignments>>,
				QueryKey,
				GetDailyAssignmentsParams["offset"]
			>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetDailyAssignmentsSuspenseInfinite<
	TData = InfiniteData<
		Awaited<ReturnType<typeof getDailyAssignments>>,
		GetDailyAssignmentsParams["offset"]
	>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetDailyAssignmentsParams,
	options?: {
		query?: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getDailyAssignments>>,
				TError,
				TData,
				Awaited<ReturnType<typeof getDailyAssignments>>,
				QueryKey,
				GetDailyAssignmentsParams["offset"]
			>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetDailyAssignmentsSuspenseInfinite<
	TData = InfiniteData<
		Awaited<ReturnType<typeof getDailyAssignments>>,
		GetDailyAssignmentsParams["offset"]
	>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetDailyAssignmentsParams,
	options?: {
		query?: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getDailyAssignments>>,
				TError,
				TData,
				Awaited<ReturnType<typeof getDailyAssignments>>,
				QueryKey,
				GetDailyAssignmentsParams["offset"]
			>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Daily Assignments
 */

export function useGetDailyAssignmentsSuspenseInfinite<
	TData = InfiniteData<
		Awaited<ReturnType<typeof getDailyAssignments>>,
		GetDailyAssignmentsParams["offset"]
	>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetDailyAssignmentsParams,
	options?: {
		query?: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getDailyAssignments>>,
				TError,
				TData,
				Awaited<ReturnType<typeof getDailyAssignments>>,
				QueryKey,
				GetDailyAssignmentsParams["offset"]
			>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getGetDailyAssignmentsSuspenseInfiniteQueryOptions(params, options);

	const query = useSuspenseInfiniteQuery(
		queryOptions,
		queryClient
	) as UseSuspenseInfiniteQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * @summary Create Daily Assignment
 */
export const createDailyAssignment = (
	dailyAssignmentCreate: DailyAssignmentCreate,
	signal?: AbortSignal
) => {
	return getAxios<DailyAssignmentResponse>({
		url: `/admin/daily-assignments/`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: dailyAssignmentCreate,
		signal,
	});
};

export const getCreateDailyAssignmentMutationOptions = <
	TError = ErrorType<HTTPValidationError>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof createDailyAssignment>>,
		TError,
		{ data: DailyAssignmentCreate },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof createDailyAssignment>>,
	TError,
	{ data: DailyAssignmentCreate },
	TContext
> => {
	const mutationKey = ["createDailyAssignment"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof createDailyAssignment>>,
		{ data: DailyAssignmentCreate }
	> = props => {
		const { data } = props ?? {};

		return createDailyAssignment(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type CreateDailyAssignmentMutationResult = NonNullable<
	Awaited<ReturnType<typeof createDailyAssignment>>
>;
export type CreateDailyAssignmentMutationBody = DailyAssignmentCreate;
export type CreateDailyAssignmentMutationError = ErrorType<HTTPValidationError>;

/**
 * @summary Create Daily Assignment
 */
export const useCreateDailyAssignment = <
	TError = ErrorType<HTTPValidationError>,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof createDailyAssignment>>,
			TError,
			{ data: DailyAssignmentCreate },
			TContext
		>;
	},
	queryClient?: QueryClient
): UseMutationResult<
	Awaited<ReturnType<typeof createDailyAssignment>>,
	TError,
	{ data: DailyAssignmentCreate },
	TContext
> => {
	const mutationOptions = getCreateDailyAssignmentMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Edit Daily Assignment
 */
export const editDailyAssignment = (
	dailyAssignmentUpdate: DailyAssignmentUpdate,
	params: EditDailyAssignmentParams
) => {
	return getAxios<DailyAssignmentResponse>({
		url: `/admin/daily-assignments/`,
		method: "PATCH",
		headers: { "Content-Type": "application/json" },
		data: dailyAssignmentUpdate,
		params,
	});
};

export const getEditDailyAssignmentMutationOptions = <
	TError = ErrorType<HTTPValidationError>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof editDailyAssignment>>,
		TError,
		{ data: DailyAssignmentUpdate; params: EditDailyAssignmentParams },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof editDailyAssignment>>,
	TError,
	{ data: DailyAssignmentUpdate; params: EditDailyAssignmentParams },
	TContext
> => {
	const mutationKey = ["editDailyAssignment"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof editDailyAssignment>>,
		{ data: DailyAssignmentUpdate; params: EditDailyAssignmentParams }
	> = props => {
		const { data, params } = props ?? {};

		return editDailyAssignment(data, params);
	};

	return { mutationFn, ...mutationOptions };
};

export type EditDailyAssignmentMutationResult = NonNullable<
	Awaited<ReturnType<typeof editDailyAssignment>>
>;
export type EditDailyAssignmentMutationBody = DailyAssignmentUpdate;
export type EditDailyAssignmentMutationError = ErrorType<HTTPValidationError>;

/**
 * @summary Edit Daily Assignment
 */
export const useEditDailyAssignment = <TError = ErrorType<HTTPValidationError>, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof editDailyAssignment>>,
			TError,
			{ data: DailyAssignmentUpdate; params: EditDailyAssignmentParams },
			TContext
		>;
	},
	queryClient?: QueryClient
): UseMutationResult<
	Awaited<ReturnType<typeof editDailyAssignment>>,
	TError,
	{ data: DailyAssignmentUpdate; params: EditDailyAssignmentParams },
	TContext
> => {
	const mutationOptions = getEditDailyAssignmentMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Delete Daily Assignment
 */
export const deleteDailyAssignment = (params: DeleteDailyAssignmentParams) => {
	return getAxios<SuccessResponse>({
		url: `/admin/daily-assignments/`,
		method: "DELETE",
		params,
	});
};

export const getDeleteDailyAssignmentMutationOptions = <
	TError = ErrorType<HTTPValidationError>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof deleteDailyAssignment>>,
		TError,
		{ params: DeleteDailyAssignmentParams },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof deleteDailyAssignment>>,
	TError,
	{ params: DeleteDailyAssignmentParams },
	TContext
> => {
	const mutationKey = ["deleteDailyAssignment"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof deleteDailyAssignment>>,
		{ params: DeleteDailyAssignmentParams }
	> = props => {
		const { params } = props ?? {};

		return deleteDailyAssignment(params);
	};

	return { mutationFn, ...mutationOptions };
};

export type DeleteDailyAssignmentMutationResult = NonNullable<
	Awaited<ReturnType<typeof deleteDailyAssignment>>
>;

export type DeleteDailyAssignmentMutationError = ErrorType<HTTPValidationError>;

/**
 * @summary Delete Daily Assignment
 */
export const useDeleteDailyAssignment = <
	TError = ErrorType<HTTPValidationError>,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof deleteDailyAssignment>>,
			TError,
			{ params: DeleteDailyAssignmentParams },
			TContext
		>;
	},
	queryClient?: QueryClient
): UseMutationResult<
	Awaited<ReturnType<typeof deleteDailyAssignment>>,
	TError,
	{ params: DeleteDailyAssignmentParams },
	TContext
> => {
	const mutationOptions = getDeleteDailyAssignmentMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Get Daily Assignments Dates
 */
export const getDailyAssignmentsDates = (signal?: AbortSignal) => {
	return getAxios<string[]>({ url: `/admin/daily-assignments/dates`, method: "GET", signal });
};

export const getGetDailyAssignmentsDatesQueryKey = () => {
	return [`/admin/daily-assignments/dates`] as const;
};

export const getGetDailyAssignmentsDatesQueryOptions = <
	TData = Awaited<ReturnType<typeof getDailyAssignmentsDates>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof getDailyAssignmentsDates>>, TError, TData>
	>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetDailyAssignmentsDatesQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getDailyAssignmentsDates>>> = ({
		signal,
	}) => getDailyAssignmentsDates(signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getDailyAssignmentsDates>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetDailyAssignmentsDatesQueryResult = NonNullable<
	Awaited<ReturnType<typeof getDailyAssignmentsDates>>
>;
export type GetDailyAssignmentsDatesQueryError = ErrorType<unknown>;

export function useGetDailyAssignmentsDates<
	TData = Awaited<ReturnType<typeof getDailyAssignmentsDates>>,
	TError = ErrorType<unknown>,
>(
	options: {
		query: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getDailyAssignmentsDates>>, TError, TData>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getDailyAssignmentsDates>>,
					TError,
					Awaited<ReturnType<typeof getDailyAssignmentsDates>>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetDailyAssignmentsDates<
	TData = Awaited<ReturnType<typeof getDailyAssignmentsDates>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getDailyAssignmentsDates>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getDailyAssignmentsDates>>,
					TError,
					Awaited<ReturnType<typeof getDailyAssignmentsDates>>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetDailyAssignmentsDates<
	TData = Awaited<ReturnType<typeof getDailyAssignmentsDates>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getDailyAssignmentsDates>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Daily Assignments Dates
 */

export function useGetDailyAssignmentsDates<
	TData = Awaited<ReturnType<typeof getDailyAssignmentsDates>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getDailyAssignmentsDates>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getGetDailyAssignmentsDatesQueryOptions(options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getGetDailyAssignmentsDatesSuspenseQueryOptions = <
	TData = Awaited<ReturnType<typeof getDailyAssignmentsDates>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseSuspenseQueryOptions<Awaited<ReturnType<typeof getDailyAssignmentsDates>>, TError, TData>
	>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetDailyAssignmentsDatesQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getDailyAssignmentsDates>>> = ({
		signal,
	}) => getDailyAssignmentsDates(signal);

	return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
		Awaited<ReturnType<typeof getDailyAssignmentsDates>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetDailyAssignmentsDatesSuspenseQueryResult = NonNullable<
	Awaited<ReturnType<typeof getDailyAssignmentsDates>>
>;
export type GetDailyAssignmentsDatesSuspenseQueryError = ErrorType<unknown>;

export function useGetDailyAssignmentsDatesSuspense<
	TData = Awaited<ReturnType<typeof getDailyAssignmentsDates>>,
	TError = ErrorType<unknown>,
>(
	options: {
		query: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof getDailyAssignmentsDates>>,
				TError,
				TData
			>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetDailyAssignmentsDatesSuspense<
	TData = Awaited<ReturnType<typeof getDailyAssignmentsDates>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof getDailyAssignmentsDates>>,
				TError,
				TData
			>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetDailyAssignmentsDatesSuspense<
	TData = Awaited<ReturnType<typeof getDailyAssignmentsDates>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof getDailyAssignmentsDates>>,
				TError,
				TData
			>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Daily Assignments Dates
 */

export function useGetDailyAssignmentsDatesSuspense<
	TData = Awaited<ReturnType<typeof getDailyAssignmentsDates>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof getDailyAssignmentsDates>>,
				TError,
				TData
			>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getGetDailyAssignmentsDatesSuspenseQueryOptions(options);

	const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * @summary Create Daily Assignments Batch
 */
export const createDailyAssignmentsBatch = (
	dailyAssignmentCreate: DailyAssignmentCreate[],
	signal?: AbortSignal
) => {
	return getAxios<DailyAssignmentResponse[]>({
		url: `/admin/daily-assignments/assignments`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: dailyAssignmentCreate,
		signal,
	});
};

export const getCreateDailyAssignmentsBatchMutationOptions = <
	TError = ErrorType<HTTPValidationError>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof createDailyAssignmentsBatch>>,
		TError,
		{ data: DailyAssignmentCreate[] },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof createDailyAssignmentsBatch>>,
	TError,
	{ data: DailyAssignmentCreate[] },
	TContext
> => {
	const mutationKey = ["createDailyAssignmentsBatch"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof createDailyAssignmentsBatch>>,
		{ data: DailyAssignmentCreate[] }
	> = props => {
		const { data } = props ?? {};

		return createDailyAssignmentsBatch(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type CreateDailyAssignmentsBatchMutationResult = NonNullable<
	Awaited<ReturnType<typeof createDailyAssignmentsBatch>>
>;
export type CreateDailyAssignmentsBatchMutationBody = DailyAssignmentCreate[];
export type CreateDailyAssignmentsBatchMutationError = ErrorType<HTTPValidationError>;

/**
 * @summary Create Daily Assignments Batch
 */
export const useCreateDailyAssignmentsBatch = <
	TError = ErrorType<HTTPValidationError>,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof createDailyAssignmentsBatch>>,
			TError,
			{ data: DailyAssignmentCreate[] },
			TContext
		>;
	},
	queryClient?: QueryClient
): UseMutationResult<
	Awaited<ReturnType<typeof createDailyAssignmentsBatch>>,
	TError,
	{ data: DailyAssignmentCreate[] },
	TContext
> => {
	const mutationOptions = getCreateDailyAssignmentsBatchMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Delete Daily Assignments Group
 */
export const deleteDailyAssignmentsGroup = (params: DeleteDailyAssignmentsGroupParams) => {
	return getAxios<SuccessResponse>({
		url: `/admin/daily-assignments/group`,
		method: "DELETE",
		params,
	});
};

export const getDeleteDailyAssignmentsGroupMutationOptions = <
	TError = ErrorType<HTTPValidationError>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof deleteDailyAssignmentsGroup>>,
		TError,
		{ params: DeleteDailyAssignmentsGroupParams },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof deleteDailyAssignmentsGroup>>,
	TError,
	{ params: DeleteDailyAssignmentsGroupParams },
	TContext
> => {
	const mutationKey = ["deleteDailyAssignmentsGroup"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof deleteDailyAssignmentsGroup>>,
		{ params: DeleteDailyAssignmentsGroupParams }
	> = props => {
		const { params } = props ?? {};

		return deleteDailyAssignmentsGroup(params);
	};

	return { mutationFn, ...mutationOptions };
};

export type DeleteDailyAssignmentsGroupMutationResult = NonNullable<
	Awaited<ReturnType<typeof deleteDailyAssignmentsGroup>>
>;

export type DeleteDailyAssignmentsGroupMutationError = ErrorType<HTTPValidationError>;

/**
 * @summary Delete Daily Assignments Group
 */
export const useDeleteDailyAssignmentsGroup = <
	TError = ErrorType<HTTPValidationError>,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof deleteDailyAssignmentsGroup>>,
			TError,
			{ params: DeleteDailyAssignmentsGroupParams },
			TContext
		>;
	},
	queryClient?: QueryClient
): UseMutationResult<
	Awaited<ReturnType<typeof deleteDailyAssignmentsGroup>>,
	TError,
	{ params: DeleteDailyAssignmentsGroupParams },
	TContext
> => {
	const mutationOptions = getDeleteDailyAssignmentsGroupMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
