/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Neuer Standard Admin API
 * OpenAPI spec version: 0.1.0
 */
import { useMutation, useQuery, useSuspenseQuery } from "@tanstack/react-query";
import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseQueryResult,
	MutationFunction,
	QueryClient,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
	UseSuspenseQueryOptions,
	UseSuspenseQueryResult,
} from "@tanstack/react-query";

import type {
	DailyExtraTaskCreate,
	DailyExtraTaskResponse,
	DailyExtraTaskUpdate,
	DeleteDailyExtraTaskParams,
	EditDailyExtraTaskParams,
	GetDailyExtraTasksParams,
	HTTPValidationError,
	SuccessResponse,
} from ".././schemas";

import { getAxios } from "../../instance";
import type { ErrorType } from "../../instance";

/**
 * @summary Get Daily Extra Tasks
 */
export const getDailyExtraTasks = (params?: GetDailyExtraTasksParams, signal?: AbortSignal) => {
	return getAxios<DailyExtraTaskResponse[]>({
		url: `/admin/daily-extra-tasks/`,
		method: "GET",
		params,
		signal,
	});
};

export const getGetDailyExtraTasksQueryKey = (params?: GetDailyExtraTasksParams) => {
	return [`/admin/daily-extra-tasks/`, ...(params ? [params] : [])] as const;
};

export const getGetDailyExtraTasksQueryOptions = <
	TData = Awaited<ReturnType<typeof getDailyExtraTasks>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetDailyExtraTasksParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getDailyExtraTasks>>, TError, TData>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetDailyExtraTasksQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getDailyExtraTasks>>> = ({ signal }) =>
		getDailyExtraTasks(params, signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getDailyExtraTasks>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetDailyExtraTasksQueryResult = NonNullable<
	Awaited<ReturnType<typeof getDailyExtraTasks>>
>;
export type GetDailyExtraTasksQueryError = ErrorType<HTTPValidationError>;

export function useGetDailyExtraTasks<
	TData = Awaited<ReturnType<typeof getDailyExtraTasks>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params: undefined | GetDailyExtraTasksParams,
	options: {
		query: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getDailyExtraTasks>>, TError, TData>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getDailyExtraTasks>>,
					TError,
					Awaited<ReturnType<typeof getDailyExtraTasks>>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetDailyExtraTasks<
	TData = Awaited<ReturnType<typeof getDailyExtraTasks>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetDailyExtraTasksParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getDailyExtraTasks>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getDailyExtraTasks>>,
					TError,
					Awaited<ReturnType<typeof getDailyExtraTasks>>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetDailyExtraTasks<
	TData = Awaited<ReturnType<typeof getDailyExtraTasks>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetDailyExtraTasksParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getDailyExtraTasks>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Daily Extra Tasks
 */

export function useGetDailyExtraTasks<
	TData = Awaited<ReturnType<typeof getDailyExtraTasks>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetDailyExtraTasksParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getDailyExtraTasks>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getGetDailyExtraTasksQueryOptions(params, options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getGetDailyExtraTasksSuspenseQueryOptions = <
	TData = Awaited<ReturnType<typeof getDailyExtraTasks>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetDailyExtraTasksParams,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getDailyExtraTasks>>, TError, TData>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetDailyExtraTasksQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getDailyExtraTasks>>> = ({ signal }) =>
		getDailyExtraTasks(params, signal);

	return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
		Awaited<ReturnType<typeof getDailyExtraTasks>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetDailyExtraTasksSuspenseQueryResult = NonNullable<
	Awaited<ReturnType<typeof getDailyExtraTasks>>
>;
export type GetDailyExtraTasksSuspenseQueryError = ErrorType<HTTPValidationError>;

export function useGetDailyExtraTasksSuspense<
	TData = Awaited<ReturnType<typeof getDailyExtraTasks>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params: undefined | GetDailyExtraTasksParams,
	options: {
		query: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getDailyExtraTasks>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetDailyExtraTasksSuspense<
	TData = Awaited<ReturnType<typeof getDailyExtraTasks>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetDailyExtraTasksParams,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getDailyExtraTasks>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetDailyExtraTasksSuspense<
	TData = Awaited<ReturnType<typeof getDailyExtraTasks>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetDailyExtraTasksParams,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getDailyExtraTasks>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Daily Extra Tasks
 */

export function useGetDailyExtraTasksSuspense<
	TData = Awaited<ReturnType<typeof getDailyExtraTasks>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetDailyExtraTasksParams,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getDailyExtraTasks>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getGetDailyExtraTasksSuspenseQueryOptions(params, options);

	const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * @summary Create Daily Extra Task
 */
export const createDailyExtraTask = (
	dailyExtraTaskCreate: DailyExtraTaskCreate,
	signal?: AbortSignal
) => {
	return getAxios<DailyExtraTaskResponse>({
		url: `/admin/daily-extra-tasks/`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: dailyExtraTaskCreate,
		signal,
	});
};

export const getCreateDailyExtraTaskMutationOptions = <
	TError = ErrorType<HTTPValidationError>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof createDailyExtraTask>>,
		TError,
		{ data: DailyExtraTaskCreate },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof createDailyExtraTask>>,
	TError,
	{ data: DailyExtraTaskCreate },
	TContext
> => {
	const mutationKey = ["createDailyExtraTask"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof createDailyExtraTask>>,
		{ data: DailyExtraTaskCreate }
	> = props => {
		const { data } = props ?? {};

		return createDailyExtraTask(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type CreateDailyExtraTaskMutationResult = NonNullable<
	Awaited<ReturnType<typeof createDailyExtraTask>>
>;
export type CreateDailyExtraTaskMutationBody = DailyExtraTaskCreate;
export type CreateDailyExtraTaskMutationError = ErrorType<HTTPValidationError>;

/**
 * @summary Create Daily Extra Task
 */
export const useCreateDailyExtraTask = <
	TError = ErrorType<HTTPValidationError>,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof createDailyExtraTask>>,
			TError,
			{ data: DailyExtraTaskCreate },
			TContext
		>;
	},
	queryClient?: QueryClient
): UseMutationResult<
	Awaited<ReturnType<typeof createDailyExtraTask>>,
	TError,
	{ data: DailyExtraTaskCreate },
	TContext
> => {
	const mutationOptions = getCreateDailyExtraTaskMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Edit Daily Extra Task
 */
export const editDailyExtraTask = (
	dailyExtraTaskUpdate: DailyExtraTaskUpdate,
	params: EditDailyExtraTaskParams
) => {
	return getAxios<DailyExtraTaskResponse>({
		url: `/admin/daily-extra-tasks/`,
		method: "PATCH",
		headers: { "Content-Type": "application/json" },
		data: dailyExtraTaskUpdate,
		params,
	});
};

export const getEditDailyExtraTaskMutationOptions = <
	TError = ErrorType<HTTPValidationError>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof editDailyExtraTask>>,
		TError,
		{ data: DailyExtraTaskUpdate; params: EditDailyExtraTaskParams },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof editDailyExtraTask>>,
	TError,
	{ data: DailyExtraTaskUpdate; params: EditDailyExtraTaskParams },
	TContext
> => {
	const mutationKey = ["editDailyExtraTask"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof editDailyExtraTask>>,
		{ data: DailyExtraTaskUpdate; params: EditDailyExtraTaskParams }
	> = props => {
		const { data, params } = props ?? {};

		return editDailyExtraTask(data, params);
	};

	return { mutationFn, ...mutationOptions };
};

export type EditDailyExtraTaskMutationResult = NonNullable<
	Awaited<ReturnType<typeof editDailyExtraTask>>
>;
export type EditDailyExtraTaskMutationBody = DailyExtraTaskUpdate;
export type EditDailyExtraTaskMutationError = ErrorType<HTTPValidationError>;

/**
 * @summary Edit Daily Extra Task
 */
export const useEditDailyExtraTask = <TError = ErrorType<HTTPValidationError>, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof editDailyExtraTask>>,
			TError,
			{ data: DailyExtraTaskUpdate; params: EditDailyExtraTaskParams },
			TContext
		>;
	},
	queryClient?: QueryClient
): UseMutationResult<
	Awaited<ReturnType<typeof editDailyExtraTask>>,
	TError,
	{ data: DailyExtraTaskUpdate; params: EditDailyExtraTaskParams },
	TContext
> => {
	const mutationOptions = getEditDailyExtraTaskMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Delete Daily Extra Task
 */
export const deleteDailyExtraTask = (params: DeleteDailyExtraTaskParams) => {
	return getAxios<SuccessResponse>({
		url: `/admin/daily-extra-tasks/`,
		method: "DELETE",
		params,
	});
};

export const getDeleteDailyExtraTaskMutationOptions = <
	TError = ErrorType<HTTPValidationError>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof deleteDailyExtraTask>>,
		TError,
		{ params: DeleteDailyExtraTaskParams },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof deleteDailyExtraTask>>,
	TError,
	{ params: DeleteDailyExtraTaskParams },
	TContext
> => {
	const mutationKey = ["deleteDailyExtraTask"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof deleteDailyExtraTask>>,
		{ params: DeleteDailyExtraTaskParams }
	> = props => {
		const { params } = props ?? {};

		return deleteDailyExtraTask(params);
	};

	return { mutationFn, ...mutationOptions };
};

export type DeleteDailyExtraTaskMutationResult = NonNullable<
	Awaited<ReturnType<typeof deleteDailyExtraTask>>
>;

export type DeleteDailyExtraTaskMutationError = ErrorType<HTTPValidationError>;

/**
 * @summary Delete Daily Extra Task
 */
export const useDeleteDailyExtraTask = <
	TError = ErrorType<HTTPValidationError>,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof deleteDailyExtraTask>>,
			TError,
			{ params: DeleteDailyExtraTaskParams },
			TContext
		>;
	},
	queryClient?: QueryClient
): UseMutationResult<
	Awaited<ReturnType<typeof deleteDailyExtraTask>>,
	TError,
	{ params: DeleteDailyExtraTaskParams },
	TContext
> => {
	const mutationOptions = getDeleteDailyExtraTaskMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
