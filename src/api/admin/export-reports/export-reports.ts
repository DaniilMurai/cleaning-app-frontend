/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Neuer Standard Admin API
 * OpenAPI spec version: 0.1.0
 */
import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseInfiniteQueryResult,
	DefinedUseQueryResult,
	InfiniteData,
	MutationFunction,
	QueryClient,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseInfiniteQueryOptions,
	UseInfiniteQueryResult,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
	UseSuspenseInfiniteQueryOptions,
	UseSuspenseInfiniteQueryResult,
	UseSuspenseQueryOptions,
	UseSuspenseQueryResult,
} from "@tanstack/react-query";
import {
	useInfiniteQuery,
	useMutation,
	useQuery,
	useSuspenseInfiniteQuery,
	useSuspenseQuery,
} from "@tanstack/react-query";

import type {
	FileResponse,
	GetExportReportsParams,
	HTTPValidationError,
	ReportExportParams,
	ReportExportResponse,
} from ".././schemas";

import type { ErrorType } from "../../instance";
import { getAxios } from "../../instance";

/**
 * @summary Create Export Reports
 */
export const createExportReports = (
	reportExportParams: ReportExportParams,
	signal?: AbortSignal
) => {
	return getAxios<number>({
		url: `/admin/export-reports/`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: reportExportParams,
		signal,
	});
};

export const getCreateExportReportsMutationOptions = <
	TError = ErrorType<HTTPValidationError>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof createExportReports>>,
		TError,
		{ data: ReportExportParams },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof createExportReports>>,
	TError,
	{ data: ReportExportParams },
	TContext
> => {
	const mutationKey = ["createExportReports"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof createExportReports>>,
		{ data: ReportExportParams }
	> = props => {
		const { data } = props ?? {};

		return createExportReports(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type CreateExportReportsMutationResult = NonNullable<
	Awaited<ReturnType<typeof createExportReports>>
>;
export type CreateExportReportsMutationBody = ReportExportParams;
export type CreateExportReportsMutationError = ErrorType<HTTPValidationError>;

/**
 * @summary Create Export Reports
 */
export const useCreateExportReports = <TError = ErrorType<HTTPValidationError>, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof createExportReports>>,
			TError,
			{ data: ReportExportParams },
			TContext
		>;
	},
	queryClient?: QueryClient
): UseMutationResult<
	Awaited<ReturnType<typeof createExportReports>>,
	TError,
	{ data: ReportExportParams },
	TContext
> => {
	const mutationOptions = getCreateExportReportsMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Get Export Reports
 */
export const getExportReports = (params?: GetExportReportsParams, signal?: AbortSignal) => {
	return getAxios<ReportExportResponse[]>({
		url: `/admin/export-reports/`,
		method: "GET",
		params,
		signal,
	});
};

export const getGetExportReportsQueryKey = (params?: GetExportReportsParams) => {
	return [`/admin/export-reports/`, ...(params ? [params] : [])] as const;
};

export const getGetExportReportsInfiniteQueryOptions = <
	TData = InfiniteData<
		Awaited<ReturnType<typeof getExportReports>>,
		GetExportReportsParams["offset"]
	>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetExportReportsParams,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getExportReports>>,
				TError,
				TData,
				Awaited<ReturnType<typeof getExportReports>>,
				QueryKey,
				GetExportReportsParams["offset"]
			>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetExportReportsQueryKey(params);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof getExportReports>>,
		QueryKey,
		GetExportReportsParams["offset"]
	> = ({ signal, pageParam }) =>
		getExportReports({ ...params, offset: pageParam || params?.["offset"] }, signal);

	return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
		Awaited<ReturnType<typeof getExportReports>>,
		TError,
		TData,
		Awaited<ReturnType<typeof getExportReports>>,
		QueryKey,
		GetExportReportsParams["offset"]
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetExportReportsInfiniteQueryResult = NonNullable<
	Awaited<ReturnType<typeof getExportReports>>
>;
export type GetExportReportsInfiniteQueryError = ErrorType<HTTPValidationError>;

export function useGetExportReportsInfinite<
	TData = InfiniteData<
		Awaited<ReturnType<typeof getExportReports>>,
		GetExportReportsParams["offset"]
	>,
	TError = ErrorType<HTTPValidationError>,
>(
	params: undefined | GetExportReportsParams,
	options: {
		query: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getExportReports>>,
				TError,
				TData,
				Awaited<ReturnType<typeof getExportReports>>,
				QueryKey,
				GetExportReportsParams["offset"]
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getExportReports>>,
					TError,
					Awaited<ReturnType<typeof getExportReports>>,
					QueryKey
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetExportReportsInfinite<
	TData = InfiniteData<
		Awaited<ReturnType<typeof getExportReports>>,
		GetExportReportsParams["offset"]
	>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetExportReportsParams,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getExportReports>>,
				TError,
				TData,
				Awaited<ReturnType<typeof getExportReports>>,
				QueryKey,
				GetExportReportsParams["offset"]
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getExportReports>>,
					TError,
					Awaited<ReturnType<typeof getExportReports>>,
					QueryKey
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetExportReportsInfinite<
	TData = InfiniteData<
		Awaited<ReturnType<typeof getExportReports>>,
		GetExportReportsParams["offset"]
	>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetExportReportsParams,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getExportReports>>,
				TError,
				TData,
				Awaited<ReturnType<typeof getExportReports>>,
				QueryKey,
				GetExportReportsParams["offset"]
			>
		>;
	},
	queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Export Reports
 */

export function useGetExportReportsInfinite<
	TData = InfiniteData<
		Awaited<ReturnType<typeof getExportReports>>,
		GetExportReportsParams["offset"]
	>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetExportReportsParams,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getExportReports>>,
				TError,
				TData,
				Awaited<ReturnType<typeof getExportReports>>,
				QueryKey,
				GetExportReportsParams["offset"]
			>
		>;
	},
	queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getGetExportReportsInfiniteQueryOptions(params, options);

	const query = useInfiniteQuery(queryOptions, queryClient) as UseInfiniteQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getGetExportReportsQueryOptions = <
	TData = Awaited<ReturnType<typeof getExportReports>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetExportReportsParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getExportReports>>, TError, TData>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetExportReportsQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getExportReports>>> = ({ signal }) =>
		getExportReports(params, signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getExportReports>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetExportReportsQueryResult = NonNullable<Awaited<ReturnType<typeof getExportReports>>>;
export type GetExportReportsQueryError = ErrorType<HTTPValidationError>;

export function useGetExportReports<
	TData = Awaited<ReturnType<typeof getExportReports>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params: undefined | GetExportReportsParams,
	options: {
		query: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getExportReports>>, TError, TData>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getExportReports>>,
					TError,
					Awaited<ReturnType<typeof getExportReports>>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetExportReports<
	TData = Awaited<ReturnType<typeof getExportReports>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetExportReportsParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getExportReports>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getExportReports>>,
					TError,
					Awaited<ReturnType<typeof getExportReports>>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetExportReports<
	TData = Awaited<ReturnType<typeof getExportReports>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetExportReportsParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getExportReports>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Export Reports
 */

export function useGetExportReports<
	TData = Awaited<ReturnType<typeof getExportReports>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetExportReportsParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getExportReports>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getGetExportReportsQueryOptions(params, options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getGetExportReportsSuspenseQueryOptions = <
	TData = Awaited<ReturnType<typeof getExportReports>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetExportReportsParams,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getExportReports>>, TError, TData>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetExportReportsQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getExportReports>>> = ({ signal }) =>
		getExportReports(params, signal);

	return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
		Awaited<ReturnType<typeof getExportReports>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetExportReportsSuspenseQueryResult = NonNullable<
	Awaited<ReturnType<typeof getExportReports>>
>;
export type GetExportReportsSuspenseQueryError = ErrorType<HTTPValidationError>;

export function useGetExportReportsSuspense<
	TData = Awaited<ReturnType<typeof getExportReports>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params: undefined | GetExportReportsParams,
	options: {
		query: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getExportReports>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetExportReportsSuspense<
	TData = Awaited<ReturnType<typeof getExportReports>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetExportReportsParams,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getExportReports>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetExportReportsSuspense<
	TData = Awaited<ReturnType<typeof getExportReports>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetExportReportsParams,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getExportReports>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Export Reports
 */

export function useGetExportReportsSuspense<
	TData = Awaited<ReturnType<typeof getExportReports>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetExportReportsParams,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getExportReports>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getGetExportReportsSuspenseQueryOptions(params, options);

	const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getGetExportReportsSuspenseInfiniteQueryOptions = <
	TData = InfiniteData<
		Awaited<ReturnType<typeof getExportReports>>,
		GetExportReportsParams["offset"]
	>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetExportReportsParams,
	options?: {
		query?: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getExportReports>>,
				TError,
				TData,
				Awaited<ReturnType<typeof getExportReports>>,
				QueryKey,
				GetExportReportsParams["offset"]
			>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetExportReportsQueryKey(params);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof getExportReports>>,
		QueryKey,
		GetExportReportsParams["offset"]
	> = ({ signal, pageParam }) =>
		getExportReports({ ...params, offset: pageParam || params?.["offset"] }, signal);

	return { queryKey, queryFn, ...queryOptions } as UseSuspenseInfiniteQueryOptions<
		Awaited<ReturnType<typeof getExportReports>>,
		TError,
		TData,
		Awaited<ReturnType<typeof getExportReports>>,
		QueryKey,
		GetExportReportsParams["offset"]
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetExportReportsSuspenseInfiniteQueryResult = NonNullable<
	Awaited<ReturnType<typeof getExportReports>>
>;
export type GetExportReportsSuspenseInfiniteQueryError = ErrorType<HTTPValidationError>;

export function useGetExportReportsSuspenseInfinite<
	TData = InfiniteData<
		Awaited<ReturnType<typeof getExportReports>>,
		GetExportReportsParams["offset"]
	>,
	TError = ErrorType<HTTPValidationError>,
>(
	params: undefined | GetExportReportsParams,
	options: {
		query: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getExportReports>>,
				TError,
				TData,
				Awaited<ReturnType<typeof getExportReports>>,
				QueryKey,
				GetExportReportsParams["offset"]
			>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetExportReportsSuspenseInfinite<
	TData = InfiniteData<
		Awaited<ReturnType<typeof getExportReports>>,
		GetExportReportsParams["offset"]
	>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetExportReportsParams,
	options?: {
		query?: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getExportReports>>,
				TError,
				TData,
				Awaited<ReturnType<typeof getExportReports>>,
				QueryKey,
				GetExportReportsParams["offset"]
			>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetExportReportsSuspenseInfinite<
	TData = InfiniteData<
		Awaited<ReturnType<typeof getExportReports>>,
		GetExportReportsParams["offset"]
	>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetExportReportsParams,
	options?: {
		query?: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getExportReports>>,
				TError,
				TData,
				Awaited<ReturnType<typeof getExportReports>>,
				QueryKey,
				GetExportReportsParams["offset"]
			>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Export Reports
 */

export function useGetExportReportsSuspenseInfinite<
	TData = InfiniteData<
		Awaited<ReturnType<typeof getExportReports>>,
		GetExportReportsParams["offset"]
	>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetExportReportsParams,
	options?: {
		query?: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getExportReports>>,
				TError,
				TData,
				Awaited<ReturnType<typeof getExportReports>>,
				QueryKey,
				GetExportReportsParams["offset"]
			>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getGetExportReportsSuspenseInfiniteQueryOptions(params, options);

	const query = useSuspenseInfiniteQuery(
		queryOptions,
		queryClient
	) as UseSuspenseInfiniteQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * @summary Download Export
 */
export const downloadExport = (exportId: number | undefined | null, signal?: AbortSignal) => {
	return getAxios<unknown>({
		url: `/admin/export-reports/${exportId}/download`,
		method: "GET",
		signal,
	});
};

export const getDownloadExportQueryKey = (exportId: number | undefined | null) => {
	return [`/admin/export-reports/${exportId}/download`] as const;
};

export const getDownloadExportQueryOptions = <
	TData = Awaited<ReturnType<typeof downloadExport>>,
	TError = ErrorType<HTTPValidationError>,
>(
	exportId: number | undefined | null,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof downloadExport>>, TError, TData>>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getDownloadExportQueryKey(exportId);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof downloadExport>>> = ({ signal }) =>
		downloadExport(exportId, signal);

	return { queryKey, queryFn, enabled: !!exportId, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof downloadExport>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type DownloadExportQueryResult = NonNullable<Awaited<ReturnType<typeof downloadExport>>>;
export type DownloadExportQueryError = ErrorType<HTTPValidationError>;

export function useDownloadExport<
	TData = Awaited<ReturnType<typeof downloadExport>>,
	TError = ErrorType<HTTPValidationError>,
>(
	exportId: number | undefined | null,
	options: {
		query: Partial<UseQueryOptions<Awaited<ReturnType<typeof downloadExport>>, TError, TData>> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof downloadExport>>,
					TError,
					Awaited<ReturnType<typeof downloadExport>>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDownloadExport<
	TData = Awaited<ReturnType<typeof downloadExport>>,
	TError = ErrorType<HTTPValidationError>,
>(
	exportId: number | undefined | null,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof downloadExport>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof downloadExport>>,
					TError,
					Awaited<ReturnType<typeof downloadExport>>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDownloadExport<
	TData = Awaited<ReturnType<typeof downloadExport>>,
	TError = ErrorType<HTTPValidationError>,
>(
	exportId: number | undefined | null,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof downloadExport>>, TError, TData>>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Download Export
 */

export function useDownloadExport<
	TData = Awaited<ReturnType<typeof downloadExport>>,
	TError = ErrorType<HTTPValidationError>,
>(
	exportId: number | undefined | null,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof downloadExport>>, TError, TData>>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getDownloadExportQueryOptions(exportId, options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getDownloadExportSuspenseQueryOptions = <
	TData = Awaited<ReturnType<typeof downloadExport>>,
	TError = ErrorType<HTTPValidationError>,
>(
	exportId: number | undefined | null,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof downloadExport>>, TError, TData>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getDownloadExportQueryKey(exportId);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof downloadExport>>> = ({ signal }) =>
		downloadExport(exportId, signal);

	return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
		Awaited<ReturnType<typeof downloadExport>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type DownloadExportSuspenseQueryResult = NonNullable<
	Awaited<ReturnType<typeof downloadExport>>
>;
export type DownloadExportSuspenseQueryError = ErrorType<HTTPValidationError>;

export function useDownloadExportSuspense<
	TData = Awaited<ReturnType<typeof downloadExport>>,
	TError = ErrorType<HTTPValidationError>,
>(
	exportId: number | undefined | null,
	options: {
		query: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof downloadExport>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDownloadExportSuspense<
	TData = Awaited<ReturnType<typeof downloadExport>>,
	TError = ErrorType<HTTPValidationError>,
>(
	exportId: number | undefined | null,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof downloadExport>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDownloadExportSuspense<
	TData = Awaited<ReturnType<typeof downloadExport>>,
	TError = ErrorType<HTTPValidationError>,
>(
	exportId: number | undefined | null,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof downloadExport>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Download Export
 */

export function useDownloadExportSuspense<
	TData = Awaited<ReturnType<typeof downloadExport>>,
	TError = ErrorType<HTTPValidationError>,
>(
	exportId: number | undefined | null,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof downloadExport>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getDownloadExportSuspenseQueryOptions(exportId, options);

	const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * @summary Export Type
 */
export const exportType = (exportId: number | undefined | null, signal?: AbortSignal) => {
	return getAxios<FileResponse>({
		url: `/admin/export-reports/${exportId}/type`,
		method: "GET",
		signal,
	});
};

export const getExportTypeQueryKey = (exportId: number | undefined | null) => {
	return [`/admin/export-reports/${exportId}/type`] as const;
};

export const getExportTypeQueryOptions = <
	TData = Awaited<ReturnType<typeof exportType>>,
	TError = ErrorType<HTTPValidationError>,
>(
	exportId: number | undefined | null,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof exportType>>, TError, TData>>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getExportTypeQueryKey(exportId);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof exportType>>> = ({ signal }) =>
		exportType(exportId, signal);

	return { queryKey, queryFn, enabled: !!exportId, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof exportType>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ExportTypeQueryResult = NonNullable<Awaited<ReturnType<typeof exportType>>>;
export type ExportTypeQueryError = ErrorType<HTTPValidationError>;

export function useExportType<
	TData = Awaited<ReturnType<typeof exportType>>,
	TError = ErrorType<HTTPValidationError>,
>(
	exportId: number | undefined | null,
	options: {
		query: Partial<UseQueryOptions<Awaited<ReturnType<typeof exportType>>, TError, TData>> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof exportType>>,
					TError,
					Awaited<ReturnType<typeof exportType>>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useExportType<
	TData = Awaited<ReturnType<typeof exportType>>,
	TError = ErrorType<HTTPValidationError>,
>(
	exportId: number | undefined | null,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof exportType>>, TError, TData>> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof exportType>>,
					TError,
					Awaited<ReturnType<typeof exportType>>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useExportType<
	TData = Awaited<ReturnType<typeof exportType>>,
	TError = ErrorType<HTTPValidationError>,
>(
	exportId: number | undefined | null,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof exportType>>, TError, TData>>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Export Type
 */

export function useExportType<
	TData = Awaited<ReturnType<typeof exportType>>,
	TError = ErrorType<HTTPValidationError>,
>(
	exportId: number | undefined | null,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof exportType>>, TError, TData>>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getExportTypeQueryOptions(exportId, options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getExportTypeSuspenseQueryOptions = <
	TData = Awaited<ReturnType<typeof exportType>>,
	TError = ErrorType<HTTPValidationError>,
>(
	exportId: number | undefined | null,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof exportType>>, TError, TData>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getExportTypeQueryKey(exportId);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof exportType>>> = ({ signal }) =>
		exportType(exportId, signal);

	return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
		Awaited<ReturnType<typeof exportType>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ExportTypeSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof exportType>>>;
export type ExportTypeSuspenseQueryError = ErrorType<HTTPValidationError>;

export function useExportTypeSuspense<
	TData = Awaited<ReturnType<typeof exportType>>,
	TError = ErrorType<HTTPValidationError>,
>(
	exportId: number | undefined | null,
	options: {
		query: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof exportType>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useExportTypeSuspense<
	TData = Awaited<ReturnType<typeof exportType>>,
	TError = ErrorType<HTTPValidationError>,
>(
	exportId: number | undefined | null,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof exportType>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useExportTypeSuspense<
	TData = Awaited<ReturnType<typeof exportType>>,
	TError = ErrorType<HTTPValidationError>,
>(
	exportId: number | undefined | null,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof exportType>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Export Type
 */

export function useExportTypeSuspense<
	TData = Awaited<ReturnType<typeof exportType>>,
	TError = ErrorType<HTTPValidationError>,
>(
	exportId: number | undefined | null,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof exportType>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getExportTypeSuspenseQueryOptions(exportId, options);

	const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * @summary Stream Export Reports
 */
export const streamExportReports = (signal?: AbortSignal) => {
	return getAxios<unknown>({ url: `/admin/export-reports/sse`, method: "GET", signal });
};

export const getStreamExportReportsQueryKey = () => {
	return [`/admin/export-reports/sse`] as const;
};

export const getStreamExportReportsQueryOptions = <
	TData = Awaited<ReturnType<typeof streamExportReports>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof streamExportReports>>, TError, TData>
	>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getStreamExportReportsQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof streamExportReports>>> = ({ signal }) =>
		streamExportReports(signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof streamExportReports>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type StreamExportReportsQueryResult = NonNullable<
	Awaited<ReturnType<typeof streamExportReports>>
>;
export type StreamExportReportsQueryError = ErrorType<unknown>;

export function useStreamExportReports<
	TData = Awaited<ReturnType<typeof streamExportReports>>,
	TError = ErrorType<unknown>,
>(
	options: {
		query: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof streamExportReports>>, TError, TData>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof streamExportReports>>,
					TError,
					Awaited<ReturnType<typeof streamExportReports>>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useStreamExportReports<
	TData = Awaited<ReturnType<typeof streamExportReports>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof streamExportReports>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof streamExportReports>>,
					TError,
					Awaited<ReturnType<typeof streamExportReports>>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useStreamExportReports<
	TData = Awaited<ReturnType<typeof streamExportReports>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof streamExportReports>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Stream Export Reports
 */

export function useStreamExportReports<
	TData = Awaited<ReturnType<typeof streamExportReports>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof streamExportReports>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getStreamExportReportsQueryOptions(options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getStreamExportReportsSuspenseQueryOptions = <
	TData = Awaited<ReturnType<typeof streamExportReports>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseSuspenseQueryOptions<Awaited<ReturnType<typeof streamExportReports>>, TError, TData>
	>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getStreamExportReportsQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof streamExportReports>>> = ({ signal }) =>
		streamExportReports(signal);

	return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
		Awaited<ReturnType<typeof streamExportReports>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type StreamExportReportsSuspenseQueryResult = NonNullable<
	Awaited<ReturnType<typeof streamExportReports>>
>;
export type StreamExportReportsSuspenseQueryError = ErrorType<unknown>;

export function useStreamExportReportsSuspense<
	TData = Awaited<ReturnType<typeof streamExportReports>>,
	TError = ErrorType<unknown>,
>(
	options: {
		query: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof streamExportReports>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useStreamExportReportsSuspense<
	TData = Awaited<ReturnType<typeof streamExportReports>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof streamExportReports>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useStreamExportReportsSuspense<
	TData = Awaited<ReturnType<typeof streamExportReports>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof streamExportReports>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Stream Export Reports
 */

export function useStreamExportReportsSuspense<
	TData = Awaited<ReturnType<typeof streamExportReports>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof streamExportReports>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getStreamExportReportsSuspenseQueryOptions(options);

	const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}
