/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Neuer Standard Admin API
 * OpenAPI spec version: 0.1.0
 */
export interface HTTPValidationError {
  detail?: ValidationError[];
}

export interface InviteLink {
  invite_link: string;
}

export type RegisterUserDataRole = UserRole | null;

export type RegisterUserDataAdminNote = string | null;

export interface RegisterUserData {
  full_name: string;
  role?: RegisterUserDataRole;
  admin_note?: RegisterUserDataAdminNote;
}

export const SuccessResponseValue = {
  success: true,
} as const;
export type SuccessResponse = typeof SuccessResponseValue;

export type UserRole = typeof UserRole[keyof typeof UserRole];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserRole = {
  employee: 'employee',
  admin: 'admin',
  superadmin: 'superadmin',
} as const;

export type UserSchemaFullName = string | null;

export type UserSchemaAdminNote = string | null;

export interface UserSchema {
  id: number;
  nickname: string;
  role: UserRole;
  status: UserStatus;
  full_name: UserSchemaFullName;
  admin_note: UserSchemaAdminNote;
  created_at: string;
}

export type UserStatus = typeof UserStatus[keyof typeof UserStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserStatus = {
  pending: 'pending',
  active: 'active',
  disabled: 'disabled',
} as const;

export type UserUpdateDataNickname = string | null;

export type UserUpdateDataPassword = string | null;

export type UserUpdateDataRole = UserRole | null;

export type UserUpdateDataStatus = UserStatus | null;

export type UserUpdateDataFullName = string | null;

export type UserUpdateDataAdminNote = string | null;

export interface UserUpdateData {
  nickname?: UserUpdateDataNickname;
  password?: UserUpdateDataPassword;
  role?: UserUpdateDataRole;
  status?: UserUpdateDataStatus;
  full_name?: UserUpdateDataFullName;
  admin_note?: UserUpdateDataAdminNote;
}

export type ValidationErrorLocItem = string | number;

export interface ValidationError {
  loc: ValidationErrorLocItem[];
  msg: string;
  type: string;
}

export type GetUsersUsersGetParams = {
role?: UserRole | null;
status?: UserStatus | null;
nickname?: string | null;
search?: string | null;
offset?: number | null;
limit?: number | null;
};

export type UpdateUserUsersPatchParams = {
user_id: number;
};

export type DeleteUserUsersDeleteParams = {
user_id: number;
};

