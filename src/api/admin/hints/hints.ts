/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Neuer Standard Admin API
 * OpenAPI spec version: 0.1.0
 */
import {
	useInfiniteQuery,
	useMutation,
	useQuery,
	useSuspenseInfiniteQuery,
	useSuspenseQuery,
} from "@tanstack/react-query";
import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseInfiniteQueryResult,
	DefinedUseQueryResult,
	InfiniteData,
	MutationFunction,
	QueryClient,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseInfiniteQueryOptions,
	UseInfiniteQueryResult,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
	UseSuspenseInfiniteQueryOptions,
	UseSuspenseInfiniteQueryResult,
	UseSuspenseQueryOptions,
	UseSuspenseQueryResult,
} from "@tanstack/react-query";

import type {
	DeleteHintParams,
	GetHintsParams,
	HTTPValidationError,
	HintsCreate,
	HintsResponse,
	HintsUpdate,
	SuccessResponse,
	UpdateHintParams,
} from ".././schemas";

import { getAxios } from "../../instance";
import type { ErrorType } from "../../instance";

/**
 * @summary Get Hints
 */
export const getHints = (params?: GetHintsParams, signal?: AbortSignal) => {
	return getAxios<HintsResponse[]>({ url: `/admin/hints/`, method: "GET", params, signal });
};

export const getGetHintsQueryKey = (params?: GetHintsParams) => {
	return [`/admin/hints/`, ...(params ? [params] : [])] as const;
};

export const getGetHintsInfiniteQueryOptions = <
	TData = InfiniteData<Awaited<ReturnType<typeof getHints>>, GetHintsParams["offset"]>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetHintsParams,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getHints>>,
				TError,
				TData,
				Awaited<ReturnType<typeof getHints>>,
				QueryKey,
				GetHintsParams["offset"]
			>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetHintsQueryKey(params);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof getHints>>,
		QueryKey,
		GetHintsParams["offset"]
	> = ({ signal, pageParam }) =>
		getHints({ ...params, offset: pageParam || params?.["offset"] }, signal);

	return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
		Awaited<ReturnType<typeof getHints>>,
		TError,
		TData,
		Awaited<ReturnType<typeof getHints>>,
		QueryKey,
		GetHintsParams["offset"]
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetHintsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getHints>>>;
export type GetHintsInfiniteQueryError = ErrorType<HTTPValidationError>;

export function useGetHintsInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getHints>>, GetHintsParams["offset"]>,
	TError = ErrorType<HTTPValidationError>,
>(
	params: undefined | GetHintsParams,
	options: {
		query: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getHints>>,
				TError,
				TData,
				Awaited<ReturnType<typeof getHints>>,
				QueryKey,
				GetHintsParams["offset"]
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getHints>>,
					TError,
					Awaited<ReturnType<typeof getHints>>,
					QueryKey
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetHintsInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getHints>>, GetHintsParams["offset"]>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetHintsParams,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getHints>>,
				TError,
				TData,
				Awaited<ReturnType<typeof getHints>>,
				QueryKey,
				GetHintsParams["offset"]
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getHints>>,
					TError,
					Awaited<ReturnType<typeof getHints>>,
					QueryKey
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetHintsInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getHints>>, GetHintsParams["offset"]>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetHintsParams,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getHints>>,
				TError,
				TData,
				Awaited<ReturnType<typeof getHints>>,
				QueryKey,
				GetHintsParams["offset"]
			>
		>;
	},
	queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Hints
 */

export function useGetHintsInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getHints>>, GetHintsParams["offset"]>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetHintsParams,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getHints>>,
				TError,
				TData,
				Awaited<ReturnType<typeof getHints>>,
				QueryKey,
				GetHintsParams["offset"]
			>
		>;
	},
	queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getGetHintsInfiniteQueryOptions(params, options);

	const query = useInfiniteQuery(queryOptions, queryClient) as UseInfiniteQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getGetHintsQueryOptions = <
	TData = Awaited<ReturnType<typeof getHints>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetHintsParams,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getHints>>, TError, TData>>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetHintsQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getHints>>> = ({ signal }) =>
		getHints(params, signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getHints>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetHintsQueryResult = NonNullable<Awaited<ReturnType<typeof getHints>>>;
export type GetHintsQueryError = ErrorType<HTTPValidationError>;

export function useGetHints<
	TData = Awaited<ReturnType<typeof getHints>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params: undefined | GetHintsParams,
	options: {
		query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getHints>>, TError, TData>> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getHints>>,
					TError,
					Awaited<ReturnType<typeof getHints>>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetHints<
	TData = Awaited<ReturnType<typeof getHints>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetHintsParams,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getHints>>, TError, TData>> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getHints>>,
					TError,
					Awaited<ReturnType<typeof getHints>>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetHints<
	TData = Awaited<ReturnType<typeof getHints>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetHintsParams,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getHints>>, TError, TData>>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Hints
 */

export function useGetHints<
	TData = Awaited<ReturnType<typeof getHints>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetHintsParams,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getHints>>, TError, TData>>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getGetHintsQueryOptions(params, options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getGetHintsSuspenseQueryOptions = <
	TData = Awaited<ReturnType<typeof getHints>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetHintsParams,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getHints>>, TError, TData>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetHintsQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getHints>>> = ({ signal }) =>
		getHints(params, signal);

	return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
		Awaited<ReturnType<typeof getHints>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetHintsSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof getHints>>>;
export type GetHintsSuspenseQueryError = ErrorType<HTTPValidationError>;

export function useGetHintsSuspense<
	TData = Awaited<ReturnType<typeof getHints>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params: undefined | GetHintsParams,
	options: {
		query: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getHints>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetHintsSuspense<
	TData = Awaited<ReturnType<typeof getHints>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetHintsParams,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getHints>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetHintsSuspense<
	TData = Awaited<ReturnType<typeof getHints>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetHintsParams,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getHints>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Hints
 */

export function useGetHintsSuspense<
	TData = Awaited<ReturnType<typeof getHints>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetHintsParams,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getHints>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getGetHintsSuspenseQueryOptions(params, options);

	const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getGetHintsSuspenseInfiniteQueryOptions = <
	TData = InfiniteData<Awaited<ReturnType<typeof getHints>>, GetHintsParams["offset"]>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetHintsParams,
	options?: {
		query?: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getHints>>,
				TError,
				TData,
				Awaited<ReturnType<typeof getHints>>,
				QueryKey,
				GetHintsParams["offset"]
			>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetHintsQueryKey(params);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof getHints>>,
		QueryKey,
		GetHintsParams["offset"]
	> = ({ signal, pageParam }) =>
		getHints({ ...params, offset: pageParam || params?.["offset"] }, signal);

	return { queryKey, queryFn, ...queryOptions } as UseSuspenseInfiniteQueryOptions<
		Awaited<ReturnType<typeof getHints>>,
		TError,
		TData,
		Awaited<ReturnType<typeof getHints>>,
		QueryKey,
		GetHintsParams["offset"]
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetHintsSuspenseInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getHints>>>;
export type GetHintsSuspenseInfiniteQueryError = ErrorType<HTTPValidationError>;

export function useGetHintsSuspenseInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getHints>>, GetHintsParams["offset"]>,
	TError = ErrorType<HTTPValidationError>,
>(
	params: undefined | GetHintsParams,
	options: {
		query: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getHints>>,
				TError,
				TData,
				Awaited<ReturnType<typeof getHints>>,
				QueryKey,
				GetHintsParams["offset"]
			>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetHintsSuspenseInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getHints>>, GetHintsParams["offset"]>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetHintsParams,
	options?: {
		query?: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getHints>>,
				TError,
				TData,
				Awaited<ReturnType<typeof getHints>>,
				QueryKey,
				GetHintsParams["offset"]
			>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetHintsSuspenseInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getHints>>, GetHintsParams["offset"]>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetHintsParams,
	options?: {
		query?: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getHints>>,
				TError,
				TData,
				Awaited<ReturnType<typeof getHints>>,
				QueryKey,
				GetHintsParams["offset"]
			>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Hints
 */

export function useGetHintsSuspenseInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getHints>>, GetHintsParams["offset"]>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetHintsParams,
	options?: {
		query?: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getHints>>,
				TError,
				TData,
				Awaited<ReturnType<typeof getHints>>,
				QueryKey,
				GetHintsParams["offset"]
			>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getGetHintsSuspenseInfiniteQueryOptions(params, options);

	const query = useSuspenseInfiniteQuery(
		queryOptions,
		queryClient
	) as UseSuspenseInfiniteQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * @summary Create Hint
 */
export const createHint = (hintsCreate: HintsCreate, signal?: AbortSignal) => {
	return getAxios<HintsResponse>({
		url: `/admin/hints/`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: hintsCreate,
		signal,
	});
};

export const getCreateHintMutationOptions = <
	TError = ErrorType<HTTPValidationError>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof createHint>>,
		TError,
		{ data: HintsCreate },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof createHint>>,
	TError,
	{ data: HintsCreate },
	TContext
> => {
	const mutationKey = ["createHint"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof createHint>>,
		{ data: HintsCreate }
	> = props => {
		const { data } = props ?? {};

		return createHint(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type CreateHintMutationResult = NonNullable<Awaited<ReturnType<typeof createHint>>>;
export type CreateHintMutationBody = HintsCreate;
export type CreateHintMutationError = ErrorType<HTTPValidationError>;

/**
 * @summary Create Hint
 */
export const useCreateHint = <TError = ErrorType<HTTPValidationError>, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof createHint>>,
			TError,
			{ data: HintsCreate },
			TContext
		>;
	},
	queryClient?: QueryClient
): UseMutationResult<
	Awaited<ReturnType<typeof createHint>>,
	TError,
	{ data: HintsCreate },
	TContext
> => {
	const mutationOptions = getCreateHintMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Update Hint
 */
export const updateHint = (hintsUpdate: HintsUpdate, params: UpdateHintParams) => {
	return getAxios<HintsResponse>({
		url: `/admin/hints/`,
		method: "PATCH",
		headers: { "Content-Type": "application/json" },
		data: hintsUpdate,
		params,
	});
};

export const getUpdateHintMutationOptions = <
	TError = ErrorType<HTTPValidationError>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof updateHint>>,
		TError,
		{ data: HintsUpdate; params: UpdateHintParams },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof updateHint>>,
	TError,
	{ data: HintsUpdate; params: UpdateHintParams },
	TContext
> => {
	const mutationKey = ["updateHint"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof updateHint>>,
		{ data: HintsUpdate; params: UpdateHintParams }
	> = props => {
		const { data, params } = props ?? {};

		return updateHint(data, params);
	};

	return { mutationFn, ...mutationOptions };
};

export type UpdateHintMutationResult = NonNullable<Awaited<ReturnType<typeof updateHint>>>;
export type UpdateHintMutationBody = HintsUpdate;
export type UpdateHintMutationError = ErrorType<HTTPValidationError>;

/**
 * @summary Update Hint
 */
export const useUpdateHint = <TError = ErrorType<HTTPValidationError>, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof updateHint>>,
			TError,
			{ data: HintsUpdate; params: UpdateHintParams },
			TContext
		>;
	},
	queryClient?: QueryClient
): UseMutationResult<
	Awaited<ReturnType<typeof updateHint>>,
	TError,
	{ data: HintsUpdate; params: UpdateHintParams },
	TContext
> => {
	const mutationOptions = getUpdateHintMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Delete Hint
 */
export const deleteHint = (params: DeleteHintParams) => {
	return getAxios<SuccessResponse>({ url: `/admin/hints/`, method: "DELETE", params });
};

export const getDeleteHintMutationOptions = <
	TError = ErrorType<HTTPValidationError>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof deleteHint>>,
		TError,
		{ params: DeleteHintParams },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof deleteHint>>,
	TError,
	{ params: DeleteHintParams },
	TContext
> => {
	const mutationKey = ["deleteHint"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof deleteHint>>,
		{ params: DeleteHintParams }
	> = props => {
		const { params } = props ?? {};

		return deleteHint(params);
	};

	return { mutationFn, ...mutationOptions };
};

export type DeleteHintMutationResult = NonNullable<Awaited<ReturnType<typeof deleteHint>>>;

export type DeleteHintMutationError = ErrorType<HTTPValidationError>;

/**
 * @summary Delete Hint
 */
export const useDeleteHint = <TError = ErrorType<HTTPValidationError>, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof deleteHint>>,
			TError,
			{ params: DeleteHintParams },
			TContext
		>;
	},
	queryClient?: QueryClient
): UseMutationResult<
	Awaited<ReturnType<typeof deleteHint>>,
	TError,
	{ params: DeleteHintParams },
	TContext
> => {
	const mutationOptions = getDeleteHintMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Get Hint By Task Id
 */
export const getHintByTaskId = (taskId: number | undefined | null, signal?: AbortSignal) => {
	return getAxios<HintsResponse[]>({ url: `/admin/hints/${taskId}`, method: "GET", signal });
};

export const getGetHintByTaskIdQueryKey = (taskId: number | undefined | null) => {
	return [`/admin/hints/${taskId}`] as const;
};

export const getGetHintByTaskIdQueryOptions = <
	TData = Awaited<ReturnType<typeof getHintByTaskId>>,
	TError = ErrorType<HTTPValidationError>,
>(
	taskId: number | undefined | null,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getHintByTaskId>>, TError, TData>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetHintByTaskIdQueryKey(taskId);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getHintByTaskId>>> = ({ signal }) =>
		getHintByTaskId(taskId, signal);

	return { queryKey, queryFn, enabled: !!taskId, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getHintByTaskId>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetHintByTaskIdQueryResult = NonNullable<Awaited<ReturnType<typeof getHintByTaskId>>>;
export type GetHintByTaskIdQueryError = ErrorType<HTTPValidationError>;

export function useGetHintByTaskId<
	TData = Awaited<ReturnType<typeof getHintByTaskId>>,
	TError = ErrorType<HTTPValidationError>,
>(
	taskId: number | undefined | null,
	options: {
		query: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getHintByTaskId>>, TError, TData>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getHintByTaskId>>,
					TError,
					Awaited<ReturnType<typeof getHintByTaskId>>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetHintByTaskId<
	TData = Awaited<ReturnType<typeof getHintByTaskId>>,
	TError = ErrorType<HTTPValidationError>,
>(
	taskId: number | undefined | null,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getHintByTaskId>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getHintByTaskId>>,
					TError,
					Awaited<ReturnType<typeof getHintByTaskId>>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetHintByTaskId<
	TData = Awaited<ReturnType<typeof getHintByTaskId>>,
	TError = ErrorType<HTTPValidationError>,
>(
	taskId: number | undefined | null,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getHintByTaskId>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Hint By Task Id
 */

export function useGetHintByTaskId<
	TData = Awaited<ReturnType<typeof getHintByTaskId>>,
	TError = ErrorType<HTTPValidationError>,
>(
	taskId: number | undefined | null,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getHintByTaskId>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getGetHintByTaskIdQueryOptions(taskId, options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getGetHintByTaskIdSuspenseQueryOptions = <
	TData = Awaited<ReturnType<typeof getHintByTaskId>>,
	TError = ErrorType<HTTPValidationError>,
>(
	taskId: number | undefined | null,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getHintByTaskId>>, TError, TData>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetHintByTaskIdQueryKey(taskId);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getHintByTaskId>>> = ({ signal }) =>
		getHintByTaskId(taskId, signal);

	return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
		Awaited<ReturnType<typeof getHintByTaskId>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetHintByTaskIdSuspenseQueryResult = NonNullable<
	Awaited<ReturnType<typeof getHintByTaskId>>
>;
export type GetHintByTaskIdSuspenseQueryError = ErrorType<HTTPValidationError>;

export function useGetHintByTaskIdSuspense<
	TData = Awaited<ReturnType<typeof getHintByTaskId>>,
	TError = ErrorType<HTTPValidationError>,
>(
	taskId: number | undefined | null,
	options: {
		query: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getHintByTaskId>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetHintByTaskIdSuspense<
	TData = Awaited<ReturnType<typeof getHintByTaskId>>,
	TError = ErrorType<HTTPValidationError>,
>(
	taskId: number | undefined | null,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getHintByTaskId>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetHintByTaskIdSuspense<
	TData = Awaited<ReturnType<typeof getHintByTaskId>>,
	TError = ErrorType<HTTPValidationError>,
>(
	taskId: number | undefined | null,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getHintByTaskId>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Hint By Task Id
 */

export function useGetHintByTaskIdSuspense<
	TData = Awaited<ReturnType<typeof getHintByTaskId>>,
	TError = ErrorType<HTTPValidationError>,
>(
	taskId: number | undefined | null,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getHintByTaskId>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getGetHintByTaskIdSuspenseQueryOptions(taskId, options);

	const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}
