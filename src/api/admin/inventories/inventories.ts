/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Neuer Standard Admin API
 * OpenAPI spec version: 0.1.0
 */
import {
	useInfiniteQuery,
	useMutation,
	useQuery,
	useSuspenseInfiniteQuery,
	useSuspenseQuery,
} from "@tanstack/react-query";
import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseInfiniteQueryResult,
	DefinedUseQueryResult,
	InfiniteData,
	MutationFunction,
	QueryClient,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseInfiniteQueryOptions,
	UseInfiniteQueryResult,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
	UseSuspenseInfiniteQueryOptions,
	UseSuspenseInfiniteQueryResult,
	UseSuspenseQueryOptions,
	UseSuspenseQueryResult,
} from "@tanstack/react-query";

import type {
	DeleteInventoryParams,
	GetInventoriesParams,
	HTTPValidationError,
	InventoryCreate,
	InventoryResponse,
	InventoryUpdate,
	SuccessResponse,
	UpdateInventoryParams,
} from ".././schemas";

import { getAxios } from "../../instance";
import type { ErrorType } from "../../instance";

/**
 * @summary Get Inventories
 */
export const getInventories = (params?: GetInventoriesParams, signal?: AbortSignal) => {
	return getAxios<InventoryResponse[]>({
		url: `/admin/inventories/`,
		method: "GET",
		params,
		signal,
	});
};

export const getGetInventoriesQueryKey = (params?: GetInventoriesParams) => {
	return [`/admin/inventories/`, ...(params ? [params] : [])] as const;
};

export const getGetInventoriesInfiniteQueryOptions = <
	TData = InfiniteData<
		Awaited<ReturnType<typeof getInventories>>,
		GetInventoriesParams["offset"]
	>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetInventoriesParams,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getInventories>>,
				TError,
				TData,
				Awaited<ReturnType<typeof getInventories>>,
				QueryKey,
				GetInventoriesParams["offset"]
			>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetInventoriesQueryKey(params);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof getInventories>>,
		QueryKey,
		GetInventoriesParams["offset"]
	> = ({ signal, pageParam }) =>
		getInventories({ ...params, offset: pageParam || params?.["offset"] }, signal);

	return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
		Awaited<ReturnType<typeof getInventories>>,
		TError,
		TData,
		Awaited<ReturnType<typeof getInventories>>,
		QueryKey,
		GetInventoriesParams["offset"]
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetInventoriesInfiniteQueryResult = NonNullable<
	Awaited<ReturnType<typeof getInventories>>
>;
export type GetInventoriesInfiniteQueryError = ErrorType<HTTPValidationError>;

export function useGetInventoriesInfinite<
	TData = InfiniteData<
		Awaited<ReturnType<typeof getInventories>>,
		GetInventoriesParams["offset"]
	>,
	TError = ErrorType<HTTPValidationError>,
>(
	params: undefined | GetInventoriesParams,
	options: {
		query: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getInventories>>,
				TError,
				TData,
				Awaited<ReturnType<typeof getInventories>>,
				QueryKey,
				GetInventoriesParams["offset"]
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getInventories>>,
					TError,
					Awaited<ReturnType<typeof getInventories>>,
					QueryKey
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetInventoriesInfinite<
	TData = InfiniteData<
		Awaited<ReturnType<typeof getInventories>>,
		GetInventoriesParams["offset"]
	>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetInventoriesParams,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getInventories>>,
				TError,
				TData,
				Awaited<ReturnType<typeof getInventories>>,
				QueryKey,
				GetInventoriesParams["offset"]
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getInventories>>,
					TError,
					Awaited<ReturnType<typeof getInventories>>,
					QueryKey
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetInventoriesInfinite<
	TData = InfiniteData<
		Awaited<ReturnType<typeof getInventories>>,
		GetInventoriesParams["offset"]
	>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetInventoriesParams,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getInventories>>,
				TError,
				TData,
				Awaited<ReturnType<typeof getInventories>>,
				QueryKey,
				GetInventoriesParams["offset"]
			>
		>;
	},
	queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Inventories
 */

export function useGetInventoriesInfinite<
	TData = InfiniteData<
		Awaited<ReturnType<typeof getInventories>>,
		GetInventoriesParams["offset"]
	>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetInventoriesParams,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getInventories>>,
				TError,
				TData,
				Awaited<ReturnType<typeof getInventories>>,
				QueryKey,
				GetInventoriesParams["offset"]
			>
		>;
	},
	queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getGetInventoriesInfiniteQueryOptions(params, options);

	const query = useInfiniteQuery(queryOptions, queryClient) as UseInfiniteQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getGetInventoriesQueryOptions = <
	TData = Awaited<ReturnType<typeof getInventories>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetInventoriesParams,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getInventories>>, TError, TData>>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetInventoriesQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getInventories>>> = ({ signal }) =>
		getInventories(params, signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getInventories>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetInventoriesQueryResult = NonNullable<Awaited<ReturnType<typeof getInventories>>>;
export type GetInventoriesQueryError = ErrorType<HTTPValidationError>;

export function useGetInventories<
	TData = Awaited<ReturnType<typeof getInventories>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params: undefined | GetInventoriesParams,
	options: {
		query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getInventories>>, TError, TData>> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getInventories>>,
					TError,
					Awaited<ReturnType<typeof getInventories>>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetInventories<
	TData = Awaited<ReturnType<typeof getInventories>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetInventoriesParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getInventories>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getInventories>>,
					TError,
					Awaited<ReturnType<typeof getInventories>>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetInventories<
	TData = Awaited<ReturnType<typeof getInventories>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetInventoriesParams,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getInventories>>, TError, TData>>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Inventories
 */

export function useGetInventories<
	TData = Awaited<ReturnType<typeof getInventories>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetInventoriesParams,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getInventories>>, TError, TData>>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getGetInventoriesQueryOptions(params, options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getGetInventoriesSuspenseQueryOptions = <
	TData = Awaited<ReturnType<typeof getInventories>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetInventoriesParams,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getInventories>>, TError, TData>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetInventoriesQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getInventories>>> = ({ signal }) =>
		getInventories(params, signal);

	return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
		Awaited<ReturnType<typeof getInventories>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetInventoriesSuspenseQueryResult = NonNullable<
	Awaited<ReturnType<typeof getInventories>>
>;
export type GetInventoriesSuspenseQueryError = ErrorType<HTTPValidationError>;

export function useGetInventoriesSuspense<
	TData = Awaited<ReturnType<typeof getInventories>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params: undefined | GetInventoriesParams,
	options: {
		query: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getInventories>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetInventoriesSuspense<
	TData = Awaited<ReturnType<typeof getInventories>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetInventoriesParams,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getInventories>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetInventoriesSuspense<
	TData = Awaited<ReturnType<typeof getInventories>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetInventoriesParams,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getInventories>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Inventories
 */

export function useGetInventoriesSuspense<
	TData = Awaited<ReturnType<typeof getInventories>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetInventoriesParams,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getInventories>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getGetInventoriesSuspenseQueryOptions(params, options);

	const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getGetInventoriesSuspenseInfiniteQueryOptions = <
	TData = InfiniteData<
		Awaited<ReturnType<typeof getInventories>>,
		GetInventoriesParams["offset"]
	>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetInventoriesParams,
	options?: {
		query?: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getInventories>>,
				TError,
				TData,
				Awaited<ReturnType<typeof getInventories>>,
				QueryKey,
				GetInventoriesParams["offset"]
			>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetInventoriesQueryKey(params);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof getInventories>>,
		QueryKey,
		GetInventoriesParams["offset"]
	> = ({ signal, pageParam }) =>
		getInventories({ ...params, offset: pageParam || params?.["offset"] }, signal);

	return { queryKey, queryFn, ...queryOptions } as UseSuspenseInfiniteQueryOptions<
		Awaited<ReturnType<typeof getInventories>>,
		TError,
		TData,
		Awaited<ReturnType<typeof getInventories>>,
		QueryKey,
		GetInventoriesParams["offset"]
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetInventoriesSuspenseInfiniteQueryResult = NonNullable<
	Awaited<ReturnType<typeof getInventories>>
>;
export type GetInventoriesSuspenseInfiniteQueryError = ErrorType<HTTPValidationError>;

export function useGetInventoriesSuspenseInfinite<
	TData = InfiniteData<
		Awaited<ReturnType<typeof getInventories>>,
		GetInventoriesParams["offset"]
	>,
	TError = ErrorType<HTTPValidationError>,
>(
	params: undefined | GetInventoriesParams,
	options: {
		query: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getInventories>>,
				TError,
				TData,
				Awaited<ReturnType<typeof getInventories>>,
				QueryKey,
				GetInventoriesParams["offset"]
			>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetInventoriesSuspenseInfinite<
	TData = InfiniteData<
		Awaited<ReturnType<typeof getInventories>>,
		GetInventoriesParams["offset"]
	>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetInventoriesParams,
	options?: {
		query?: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getInventories>>,
				TError,
				TData,
				Awaited<ReturnType<typeof getInventories>>,
				QueryKey,
				GetInventoriesParams["offset"]
			>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetInventoriesSuspenseInfinite<
	TData = InfiniteData<
		Awaited<ReturnType<typeof getInventories>>,
		GetInventoriesParams["offset"]
	>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetInventoriesParams,
	options?: {
		query?: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getInventories>>,
				TError,
				TData,
				Awaited<ReturnType<typeof getInventories>>,
				QueryKey,
				GetInventoriesParams["offset"]
			>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Inventories
 */

export function useGetInventoriesSuspenseInfinite<
	TData = InfiniteData<
		Awaited<ReturnType<typeof getInventories>>,
		GetInventoriesParams["offset"]
	>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetInventoriesParams,
	options?: {
		query?: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getInventories>>,
				TError,
				TData,
				Awaited<ReturnType<typeof getInventories>>,
				QueryKey,
				GetInventoriesParams["offset"]
			>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getGetInventoriesSuspenseInfiniteQueryOptions(params, options);

	const query = useSuspenseInfiniteQuery(
		queryOptions,
		queryClient
	) as UseSuspenseInfiniteQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * @summary Create Inventory
 */
export const createInventory = (inventoryCreate: InventoryCreate, signal?: AbortSignal) => {
	return getAxios<InventoryResponse>({
		url: `/admin/inventories/`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: inventoryCreate,
		signal,
	});
};

export const getCreateInventoryMutationOptions = <
	TError = ErrorType<HTTPValidationError>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof createInventory>>,
		TError,
		{ data: InventoryCreate },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof createInventory>>,
	TError,
	{ data: InventoryCreate },
	TContext
> => {
	const mutationKey = ["createInventory"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof createInventory>>,
		{ data: InventoryCreate }
	> = props => {
		const { data } = props ?? {};

		return createInventory(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type CreateInventoryMutationResult = NonNullable<
	Awaited<ReturnType<typeof createInventory>>
>;
export type CreateInventoryMutationBody = InventoryCreate;
export type CreateInventoryMutationError = ErrorType<HTTPValidationError>;

/**
 * @summary Create Inventory
 */
export const useCreateInventory = <TError = ErrorType<HTTPValidationError>, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof createInventory>>,
			TError,
			{ data: InventoryCreate },
			TContext
		>;
	},
	queryClient?: QueryClient
): UseMutationResult<
	Awaited<ReturnType<typeof createInventory>>,
	TError,
	{ data: InventoryCreate },
	TContext
> => {
	const mutationOptions = getCreateInventoryMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Update Inventory
 */
export const updateInventory = (
	inventoryUpdate: InventoryUpdate,
	params: UpdateInventoryParams
) => {
	return getAxios<InventoryResponse>({
		url: `/admin/inventories/`,
		method: "PATCH",
		headers: { "Content-Type": "application/json" },
		data: inventoryUpdate,
		params,
	});
};

export const getUpdateInventoryMutationOptions = <
	TError = ErrorType<HTTPValidationError>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof updateInventory>>,
		TError,
		{ data: InventoryUpdate; params: UpdateInventoryParams },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof updateInventory>>,
	TError,
	{ data: InventoryUpdate; params: UpdateInventoryParams },
	TContext
> => {
	const mutationKey = ["updateInventory"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof updateInventory>>,
		{ data: InventoryUpdate; params: UpdateInventoryParams }
	> = props => {
		const { data, params } = props ?? {};

		return updateInventory(data, params);
	};

	return { mutationFn, ...mutationOptions };
};

export type UpdateInventoryMutationResult = NonNullable<
	Awaited<ReturnType<typeof updateInventory>>
>;
export type UpdateInventoryMutationBody = InventoryUpdate;
export type UpdateInventoryMutationError = ErrorType<HTTPValidationError>;

/**
 * @summary Update Inventory
 */
export const useUpdateInventory = <TError = ErrorType<HTTPValidationError>, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof updateInventory>>,
			TError,
			{ data: InventoryUpdate; params: UpdateInventoryParams },
			TContext
		>;
	},
	queryClient?: QueryClient
): UseMutationResult<
	Awaited<ReturnType<typeof updateInventory>>,
	TError,
	{ data: InventoryUpdate; params: UpdateInventoryParams },
	TContext
> => {
	const mutationOptions = getUpdateInventoryMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Delete Inventory
 */
export const deleteInventory = (params: DeleteInventoryParams) => {
	return getAxios<SuccessResponse>({ url: `/admin/inventories/`, method: "DELETE", params });
};

export const getDeleteInventoryMutationOptions = <
	TError = ErrorType<HTTPValidationError>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof deleteInventory>>,
		TError,
		{ params: DeleteInventoryParams },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof deleteInventory>>,
	TError,
	{ params: DeleteInventoryParams },
	TContext
> => {
	const mutationKey = ["deleteInventory"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof deleteInventory>>,
		{ params: DeleteInventoryParams }
	> = props => {
		const { params } = props ?? {};

		return deleteInventory(params);
	};

	return { mutationFn, ...mutationOptions };
};

export type DeleteInventoryMutationResult = NonNullable<
	Awaited<ReturnType<typeof deleteInventory>>
>;

export type DeleteInventoryMutationError = ErrorType<HTTPValidationError>;

/**
 * @summary Delete Inventory
 */
export const useDeleteInventory = <TError = ErrorType<HTTPValidationError>, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof deleteInventory>>,
			TError,
			{ params: DeleteInventoryParams },
			TContext
		>;
	},
	queryClient?: QueryClient
): UseMutationResult<
	Awaited<ReturnType<typeof deleteInventory>>,
	TError,
	{ params: DeleteInventoryParams },
	TContext
> => {
	const mutationOptions = getDeleteInventoryMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Get Inventory By Task Id
 */
export const getInventoryByTaskId = (taskId: number | undefined | null, signal?: AbortSignal) => {
	return getAxios<InventoryResponse[]>({
		url: `/admin/inventories/${taskId}`,
		method: "GET",
		signal,
	});
};

export const getGetInventoryByTaskIdQueryKey = (taskId: number | undefined | null) => {
	return [`/admin/inventories/${taskId}`] as const;
};

export const getGetInventoryByTaskIdQueryOptions = <
	TData = Awaited<ReturnType<typeof getInventoryByTaskId>>,
	TError = ErrorType<HTTPValidationError>,
>(
	taskId: number | undefined | null,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getInventoryByTaskId>>, TError, TData>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetInventoryByTaskIdQueryKey(taskId);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getInventoryByTaskId>>> = ({ signal }) =>
		getInventoryByTaskId(taskId, signal);

	return { queryKey, queryFn, enabled: !!taskId, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getInventoryByTaskId>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetInventoryByTaskIdQueryResult = NonNullable<
	Awaited<ReturnType<typeof getInventoryByTaskId>>
>;
export type GetInventoryByTaskIdQueryError = ErrorType<HTTPValidationError>;

export function useGetInventoryByTaskId<
	TData = Awaited<ReturnType<typeof getInventoryByTaskId>>,
	TError = ErrorType<HTTPValidationError>,
>(
	taskId: number | undefined | null,
	options: {
		query: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getInventoryByTaskId>>, TError, TData>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getInventoryByTaskId>>,
					TError,
					Awaited<ReturnType<typeof getInventoryByTaskId>>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetInventoryByTaskId<
	TData = Awaited<ReturnType<typeof getInventoryByTaskId>>,
	TError = ErrorType<HTTPValidationError>,
>(
	taskId: number | undefined | null,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getInventoryByTaskId>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getInventoryByTaskId>>,
					TError,
					Awaited<ReturnType<typeof getInventoryByTaskId>>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetInventoryByTaskId<
	TData = Awaited<ReturnType<typeof getInventoryByTaskId>>,
	TError = ErrorType<HTTPValidationError>,
>(
	taskId: number | undefined | null,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getInventoryByTaskId>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Inventory By Task Id
 */

export function useGetInventoryByTaskId<
	TData = Awaited<ReturnType<typeof getInventoryByTaskId>>,
	TError = ErrorType<HTTPValidationError>,
>(
	taskId: number | undefined | null,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getInventoryByTaskId>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getGetInventoryByTaskIdQueryOptions(taskId, options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getGetInventoryByTaskIdSuspenseQueryOptions = <
	TData = Awaited<ReturnType<typeof getInventoryByTaskId>>,
	TError = ErrorType<HTTPValidationError>,
>(
	taskId: number | undefined | null,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getInventoryByTaskId>>, TError, TData>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetInventoryByTaskIdQueryKey(taskId);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getInventoryByTaskId>>> = ({ signal }) =>
		getInventoryByTaskId(taskId, signal);

	return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
		Awaited<ReturnType<typeof getInventoryByTaskId>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetInventoryByTaskIdSuspenseQueryResult = NonNullable<
	Awaited<ReturnType<typeof getInventoryByTaskId>>
>;
export type GetInventoryByTaskIdSuspenseQueryError = ErrorType<HTTPValidationError>;

export function useGetInventoryByTaskIdSuspense<
	TData = Awaited<ReturnType<typeof getInventoryByTaskId>>,
	TError = ErrorType<HTTPValidationError>,
>(
	taskId: number | undefined | null,
	options: {
		query: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getInventoryByTaskId>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetInventoryByTaskIdSuspense<
	TData = Awaited<ReturnType<typeof getInventoryByTaskId>>,
	TError = ErrorType<HTTPValidationError>,
>(
	taskId: number | undefined | null,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getInventoryByTaskId>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetInventoryByTaskIdSuspense<
	TData = Awaited<ReturnType<typeof getInventoryByTaskId>>,
	TError = ErrorType<HTTPValidationError>,
>(
	taskId: number | undefined | null,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getInventoryByTaskId>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Inventory By Task Id
 */

export function useGetInventoryByTaskIdSuspense<
	TData = Awaited<ReturnType<typeof getInventoryByTaskId>>,
	TError = ErrorType<HTTPValidationError>,
>(
	taskId: number | undefined | null,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getInventoryByTaskId>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getGetInventoryByTaskIdSuspenseQueryOptions(taskId, options);

	const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}
