/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Neuer Standard Admin API
 * OpenAPI spec version: 0.1.0
 */
import {
	useInfiniteQuery,
	useMutation,
	useQuery,
	useSuspenseInfiniteQuery,
	useSuspenseQuery,
} from "@tanstack/react-query";
import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseInfiniteQueryResult,
	DefinedUseQueryResult,
	InfiniteData,
	MutationFunction,
	QueryClient,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseInfiniteQueryOptions,
	UseInfiniteQueryResult,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
	UseSuspenseInfiniteQueryOptions,
	UseSuspenseInfiniteQueryResult,
	UseSuspenseQueryOptions,
	UseSuspenseQueryResult,
} from "@tanstack/react-query";

import type {
	DeleteInventoryUserParams,
	EditInventoryUserParams,
	GetInventoryUsersParams,
	HTTPValidationError,
	InventoryUserCreate,
	InventoryUserResponse,
	InventoryUserUpdate,
	SuccessResponse,
} from ".././schemas";

import { getAxios } from "../../instance";
import type { ErrorType } from "../../instance";

/**
 * @summary Get Inventory Users
 */
export const getInventoryUsers = (params?: GetInventoryUsersParams, signal?: AbortSignal) => {
	return getAxios<InventoryUserResponse[]>({
		url: `/admin/inventory_users/`,
		method: "GET",
		params,
		signal,
	});
};

export const getGetInventoryUsersQueryKey = (params?: GetInventoryUsersParams) => {
	return [`/admin/inventory_users/`, ...(params ? [params] : [])] as const;
};

export const getGetInventoryUsersInfiniteQueryOptions = <
	TData = InfiniteData<
		Awaited<ReturnType<typeof getInventoryUsers>>,
		GetInventoryUsersParams["offset"]
	>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetInventoryUsersParams,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getInventoryUsers>>,
				TError,
				TData,
				Awaited<ReturnType<typeof getInventoryUsers>>,
				QueryKey,
				GetInventoryUsersParams["offset"]
			>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetInventoryUsersQueryKey(params);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof getInventoryUsers>>,
		QueryKey,
		GetInventoryUsersParams["offset"]
	> = ({ signal, pageParam }) =>
		getInventoryUsers({ ...params, offset: pageParam || params?.["offset"] }, signal);

	return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
		Awaited<ReturnType<typeof getInventoryUsers>>,
		TError,
		TData,
		Awaited<ReturnType<typeof getInventoryUsers>>,
		QueryKey,
		GetInventoryUsersParams["offset"]
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetInventoryUsersInfiniteQueryResult = NonNullable<
	Awaited<ReturnType<typeof getInventoryUsers>>
>;
export type GetInventoryUsersInfiniteQueryError = ErrorType<HTTPValidationError>;

export function useGetInventoryUsersInfinite<
	TData = InfiniteData<
		Awaited<ReturnType<typeof getInventoryUsers>>,
		GetInventoryUsersParams["offset"]
	>,
	TError = ErrorType<HTTPValidationError>,
>(
	params: undefined | GetInventoryUsersParams,
	options: {
		query: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getInventoryUsers>>,
				TError,
				TData,
				Awaited<ReturnType<typeof getInventoryUsers>>,
				QueryKey,
				GetInventoryUsersParams["offset"]
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getInventoryUsers>>,
					TError,
					Awaited<ReturnType<typeof getInventoryUsers>>,
					QueryKey
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetInventoryUsersInfinite<
	TData = InfiniteData<
		Awaited<ReturnType<typeof getInventoryUsers>>,
		GetInventoryUsersParams["offset"]
	>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetInventoryUsersParams,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getInventoryUsers>>,
				TError,
				TData,
				Awaited<ReturnType<typeof getInventoryUsers>>,
				QueryKey,
				GetInventoryUsersParams["offset"]
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getInventoryUsers>>,
					TError,
					Awaited<ReturnType<typeof getInventoryUsers>>,
					QueryKey
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetInventoryUsersInfinite<
	TData = InfiniteData<
		Awaited<ReturnType<typeof getInventoryUsers>>,
		GetInventoryUsersParams["offset"]
	>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetInventoryUsersParams,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getInventoryUsers>>,
				TError,
				TData,
				Awaited<ReturnType<typeof getInventoryUsers>>,
				QueryKey,
				GetInventoryUsersParams["offset"]
			>
		>;
	},
	queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Inventory Users
 */

export function useGetInventoryUsersInfinite<
	TData = InfiniteData<
		Awaited<ReturnType<typeof getInventoryUsers>>,
		GetInventoryUsersParams["offset"]
	>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetInventoryUsersParams,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getInventoryUsers>>,
				TError,
				TData,
				Awaited<ReturnType<typeof getInventoryUsers>>,
				QueryKey,
				GetInventoryUsersParams["offset"]
			>
		>;
	},
	queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getGetInventoryUsersInfiniteQueryOptions(params, options);

	const query = useInfiniteQuery(queryOptions, queryClient) as UseInfiniteQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getGetInventoryUsersQueryOptions = <
	TData = Awaited<ReturnType<typeof getInventoryUsers>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetInventoryUsersParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getInventoryUsers>>, TError, TData>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetInventoryUsersQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getInventoryUsers>>> = ({ signal }) =>
		getInventoryUsers(params, signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getInventoryUsers>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetInventoryUsersQueryResult = NonNullable<
	Awaited<ReturnType<typeof getInventoryUsers>>
>;
export type GetInventoryUsersQueryError = ErrorType<HTTPValidationError>;

export function useGetInventoryUsers<
	TData = Awaited<ReturnType<typeof getInventoryUsers>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params: undefined | GetInventoryUsersParams,
	options: {
		query: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getInventoryUsers>>, TError, TData>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getInventoryUsers>>,
					TError,
					Awaited<ReturnType<typeof getInventoryUsers>>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetInventoryUsers<
	TData = Awaited<ReturnType<typeof getInventoryUsers>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetInventoryUsersParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getInventoryUsers>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getInventoryUsers>>,
					TError,
					Awaited<ReturnType<typeof getInventoryUsers>>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetInventoryUsers<
	TData = Awaited<ReturnType<typeof getInventoryUsers>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetInventoryUsersParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getInventoryUsers>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Inventory Users
 */

export function useGetInventoryUsers<
	TData = Awaited<ReturnType<typeof getInventoryUsers>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetInventoryUsersParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getInventoryUsers>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getGetInventoryUsersQueryOptions(params, options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getGetInventoryUsersSuspenseQueryOptions = <
	TData = Awaited<ReturnType<typeof getInventoryUsers>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetInventoryUsersParams,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getInventoryUsers>>, TError, TData>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetInventoryUsersQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getInventoryUsers>>> = ({ signal }) =>
		getInventoryUsers(params, signal);

	return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
		Awaited<ReturnType<typeof getInventoryUsers>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetInventoryUsersSuspenseQueryResult = NonNullable<
	Awaited<ReturnType<typeof getInventoryUsers>>
>;
export type GetInventoryUsersSuspenseQueryError = ErrorType<HTTPValidationError>;

export function useGetInventoryUsersSuspense<
	TData = Awaited<ReturnType<typeof getInventoryUsers>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params: undefined | GetInventoryUsersParams,
	options: {
		query: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getInventoryUsers>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetInventoryUsersSuspense<
	TData = Awaited<ReturnType<typeof getInventoryUsers>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetInventoryUsersParams,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getInventoryUsers>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetInventoryUsersSuspense<
	TData = Awaited<ReturnType<typeof getInventoryUsers>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetInventoryUsersParams,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getInventoryUsers>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Inventory Users
 */

export function useGetInventoryUsersSuspense<
	TData = Awaited<ReturnType<typeof getInventoryUsers>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetInventoryUsersParams,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getInventoryUsers>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getGetInventoryUsersSuspenseQueryOptions(params, options);

	const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getGetInventoryUsersSuspenseInfiniteQueryOptions = <
	TData = InfiniteData<
		Awaited<ReturnType<typeof getInventoryUsers>>,
		GetInventoryUsersParams["offset"]
	>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetInventoryUsersParams,
	options?: {
		query?: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getInventoryUsers>>,
				TError,
				TData,
				Awaited<ReturnType<typeof getInventoryUsers>>,
				QueryKey,
				GetInventoryUsersParams["offset"]
			>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetInventoryUsersQueryKey(params);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof getInventoryUsers>>,
		QueryKey,
		GetInventoryUsersParams["offset"]
	> = ({ signal, pageParam }) =>
		getInventoryUsers({ ...params, offset: pageParam || params?.["offset"] }, signal);

	return { queryKey, queryFn, ...queryOptions } as UseSuspenseInfiniteQueryOptions<
		Awaited<ReturnType<typeof getInventoryUsers>>,
		TError,
		TData,
		Awaited<ReturnType<typeof getInventoryUsers>>,
		QueryKey,
		GetInventoryUsersParams["offset"]
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetInventoryUsersSuspenseInfiniteQueryResult = NonNullable<
	Awaited<ReturnType<typeof getInventoryUsers>>
>;
export type GetInventoryUsersSuspenseInfiniteQueryError = ErrorType<HTTPValidationError>;

export function useGetInventoryUsersSuspenseInfinite<
	TData = InfiniteData<
		Awaited<ReturnType<typeof getInventoryUsers>>,
		GetInventoryUsersParams["offset"]
	>,
	TError = ErrorType<HTTPValidationError>,
>(
	params: undefined | GetInventoryUsersParams,
	options: {
		query: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getInventoryUsers>>,
				TError,
				TData,
				Awaited<ReturnType<typeof getInventoryUsers>>,
				QueryKey,
				GetInventoryUsersParams["offset"]
			>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetInventoryUsersSuspenseInfinite<
	TData = InfiniteData<
		Awaited<ReturnType<typeof getInventoryUsers>>,
		GetInventoryUsersParams["offset"]
	>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetInventoryUsersParams,
	options?: {
		query?: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getInventoryUsers>>,
				TError,
				TData,
				Awaited<ReturnType<typeof getInventoryUsers>>,
				QueryKey,
				GetInventoryUsersParams["offset"]
			>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetInventoryUsersSuspenseInfinite<
	TData = InfiniteData<
		Awaited<ReturnType<typeof getInventoryUsers>>,
		GetInventoryUsersParams["offset"]
	>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetInventoryUsersParams,
	options?: {
		query?: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getInventoryUsers>>,
				TError,
				TData,
				Awaited<ReturnType<typeof getInventoryUsers>>,
				QueryKey,
				GetInventoryUsersParams["offset"]
			>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Inventory Users
 */

export function useGetInventoryUsersSuspenseInfinite<
	TData = InfiniteData<
		Awaited<ReturnType<typeof getInventoryUsers>>,
		GetInventoryUsersParams["offset"]
	>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetInventoryUsersParams,
	options?: {
		query?: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getInventoryUsers>>,
				TError,
				TData,
				Awaited<ReturnType<typeof getInventoryUsers>>,
				QueryKey,
				GetInventoryUsersParams["offset"]
			>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getGetInventoryUsersSuspenseInfiniteQueryOptions(params, options);

	const query = useSuspenseInfiniteQuery(
		queryOptions,
		queryClient
	) as UseSuspenseInfiniteQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * @summary Create Inventory User
 */
export const createInventoryUser = (
	inventoryUserCreate: InventoryUserCreate,
	signal?: AbortSignal
) => {
	return getAxios<InventoryUserResponse>({
		url: `/admin/inventory_users/`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: inventoryUserCreate,
		signal,
	});
};

export const getCreateInventoryUserMutationOptions = <
	TError = ErrorType<HTTPValidationError>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof createInventoryUser>>,
		TError,
		{ data: InventoryUserCreate },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof createInventoryUser>>,
	TError,
	{ data: InventoryUserCreate },
	TContext
> => {
	const mutationKey = ["createInventoryUser"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof createInventoryUser>>,
		{ data: InventoryUserCreate }
	> = props => {
		const { data } = props ?? {};

		return createInventoryUser(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type CreateInventoryUserMutationResult = NonNullable<
	Awaited<ReturnType<typeof createInventoryUser>>
>;
export type CreateInventoryUserMutationBody = InventoryUserCreate;
export type CreateInventoryUserMutationError = ErrorType<HTTPValidationError>;

/**
 * @summary Create Inventory User
 */
export const useCreateInventoryUser = <TError = ErrorType<HTTPValidationError>, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof createInventoryUser>>,
			TError,
			{ data: InventoryUserCreate },
			TContext
		>;
	},
	queryClient?: QueryClient
): UseMutationResult<
	Awaited<ReturnType<typeof createInventoryUser>>,
	TError,
	{ data: InventoryUserCreate },
	TContext
> => {
	const mutationOptions = getCreateInventoryUserMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Edit Inventory User
 */
export const editInventoryUser = (
	inventoryUserUpdate: InventoryUserUpdate,
	params: EditInventoryUserParams
) => {
	return getAxios<InventoryUserResponse>({
		url: `/admin/inventory_users/`,
		method: "PATCH",
		headers: { "Content-Type": "application/json" },
		data: inventoryUserUpdate,
		params,
	});
};

export const getEditInventoryUserMutationOptions = <
	TError = ErrorType<HTTPValidationError>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof editInventoryUser>>,
		TError,
		{ data: InventoryUserUpdate; params: EditInventoryUserParams },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof editInventoryUser>>,
	TError,
	{ data: InventoryUserUpdate; params: EditInventoryUserParams },
	TContext
> => {
	const mutationKey = ["editInventoryUser"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof editInventoryUser>>,
		{ data: InventoryUserUpdate; params: EditInventoryUserParams }
	> = props => {
		const { data, params } = props ?? {};

		return editInventoryUser(data, params);
	};

	return { mutationFn, ...mutationOptions };
};

export type EditInventoryUserMutationResult = NonNullable<
	Awaited<ReturnType<typeof editInventoryUser>>
>;
export type EditInventoryUserMutationBody = InventoryUserUpdate;
export type EditInventoryUserMutationError = ErrorType<HTTPValidationError>;

/**
 * @summary Edit Inventory User
 */
export const useEditInventoryUser = <TError = ErrorType<HTTPValidationError>, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof editInventoryUser>>,
			TError,
			{ data: InventoryUserUpdate; params: EditInventoryUserParams },
			TContext
		>;
	},
	queryClient?: QueryClient
): UseMutationResult<
	Awaited<ReturnType<typeof editInventoryUser>>,
	TError,
	{ data: InventoryUserUpdate; params: EditInventoryUserParams },
	TContext
> => {
	const mutationOptions = getEditInventoryUserMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Delete Inventory User
 */
export const deleteInventoryUser = (params: DeleteInventoryUserParams) => {
	return getAxios<SuccessResponse>({ url: `/admin/inventory_users/`, method: "DELETE", params });
};

export const getDeleteInventoryUserMutationOptions = <
	TError = ErrorType<HTTPValidationError>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof deleteInventoryUser>>,
		TError,
		{ params: DeleteInventoryUserParams },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof deleteInventoryUser>>,
	TError,
	{ params: DeleteInventoryUserParams },
	TContext
> => {
	const mutationKey = ["deleteInventoryUser"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof deleteInventoryUser>>,
		{ params: DeleteInventoryUserParams }
	> = props => {
		const { params } = props ?? {};

		return deleteInventoryUser(params);
	};

	return { mutationFn, ...mutationOptions };
};

export type DeleteInventoryUserMutationResult = NonNullable<
	Awaited<ReturnType<typeof deleteInventoryUser>>
>;

export type DeleteInventoryUserMutationError = ErrorType<HTTPValidationError>;

/**
 * @summary Delete Inventory User
 */
export const useDeleteInventoryUser = <TError = ErrorType<HTTPValidationError>, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof deleteInventoryUser>>,
			TError,
			{ params: DeleteInventoryUserParams },
			TContext
		>;
	},
	queryClient?: QueryClient
): UseMutationResult<
	Awaited<ReturnType<typeof deleteInventoryUser>>,
	TError,
	{ params: DeleteInventoryUserParams },
	TContext
> => {
	const mutationOptions = getDeleteInventoryUserMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
