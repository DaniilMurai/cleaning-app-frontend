/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Neuer Standard Admin API
 * OpenAPI spec version: 0.1.0
 */
import { useMutation, useQuery, useSuspenseQuery } from "@tanstack/react-query";
import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseQueryResult,
	MutationFunction,
	QueryClient,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
	UseSuspenseQueryOptions,
	UseSuspenseQueryResult,
} from "@tanstack/react-query";

import type {
	DeleteLocationParams,
	EditLocationParams,
	GetLocationsParams,
	HTTPValidationError,
	LocationCreate,
	LocationResponse,
	LocationUpdate,
	SuccessResponse,
} from ".././schemas";

import { getAxios } from "../../instance";
import type { ErrorType } from "../../instance";

/**
 * @summary Get Locations
 */
export const getLocations = (params?: GetLocationsParams, signal?: AbortSignal) => {
	return getAxios<LocationResponse[]>({
		url: `/admin/locations/`,
		method: "GET",
		params,
		signal,
	});
};

export const getGetLocationsQueryKey = (params?: GetLocationsParams) => {
	return [`/admin/locations/`, ...(params ? [params] : [])] as const;
};

export const getGetLocationsQueryOptions = <
	TData = Awaited<ReturnType<typeof getLocations>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetLocationsParams,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getLocations>>, TError, TData>>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetLocationsQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getLocations>>> = ({ signal }) =>
		getLocations(params, signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getLocations>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetLocationsQueryResult = NonNullable<Awaited<ReturnType<typeof getLocations>>>;
export type GetLocationsQueryError = ErrorType<HTTPValidationError>;

export function useGetLocations<
	TData = Awaited<ReturnType<typeof getLocations>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params: undefined | GetLocationsParams,
	options: {
		query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getLocations>>, TError, TData>> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getLocations>>,
					TError,
					Awaited<ReturnType<typeof getLocations>>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetLocations<
	TData = Awaited<ReturnType<typeof getLocations>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetLocationsParams,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getLocations>>, TError, TData>> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getLocations>>,
					TError,
					Awaited<ReturnType<typeof getLocations>>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetLocations<
	TData = Awaited<ReturnType<typeof getLocations>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetLocationsParams,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getLocations>>, TError, TData>>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Locations
 */

export function useGetLocations<
	TData = Awaited<ReturnType<typeof getLocations>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetLocationsParams,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getLocations>>, TError, TData>>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getGetLocationsQueryOptions(params, options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getGetLocationsSuspenseQueryOptions = <
	TData = Awaited<ReturnType<typeof getLocations>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetLocationsParams,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getLocations>>, TError, TData>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetLocationsQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getLocations>>> = ({ signal }) =>
		getLocations(params, signal);

	return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
		Awaited<ReturnType<typeof getLocations>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetLocationsSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof getLocations>>>;
export type GetLocationsSuspenseQueryError = ErrorType<HTTPValidationError>;

export function useGetLocationsSuspense<
	TData = Awaited<ReturnType<typeof getLocations>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params: undefined | GetLocationsParams,
	options: {
		query: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getLocations>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetLocationsSuspense<
	TData = Awaited<ReturnType<typeof getLocations>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetLocationsParams,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getLocations>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetLocationsSuspense<
	TData = Awaited<ReturnType<typeof getLocations>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetLocationsParams,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getLocations>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Locations
 */

export function useGetLocationsSuspense<
	TData = Awaited<ReturnType<typeof getLocations>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetLocationsParams,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getLocations>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getGetLocationsSuspenseQueryOptions(params, options);

	const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * @summary Create Location
 */
export const createLocation = (locationCreate: LocationCreate, signal?: AbortSignal) => {
	return getAxios<LocationResponse>({
		url: `/admin/locations/`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: locationCreate,
		signal,
	});
};

export const getCreateLocationMutationOptions = <
	TError = ErrorType<HTTPValidationError>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof createLocation>>,
		TError,
		{ data: LocationCreate },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof createLocation>>,
	TError,
	{ data: LocationCreate },
	TContext
> => {
	const mutationKey = ["createLocation"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof createLocation>>,
		{ data: LocationCreate }
	> = props => {
		const { data } = props ?? {};

		return createLocation(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type CreateLocationMutationResult = NonNullable<Awaited<ReturnType<typeof createLocation>>>;
export type CreateLocationMutationBody = LocationCreate;
export type CreateLocationMutationError = ErrorType<HTTPValidationError>;

/**
 * @summary Create Location
 */
export const useCreateLocation = <TError = ErrorType<HTTPValidationError>, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof createLocation>>,
			TError,
			{ data: LocationCreate },
			TContext
		>;
	},
	queryClient?: QueryClient
): UseMutationResult<
	Awaited<ReturnType<typeof createLocation>>,
	TError,
	{ data: LocationCreate },
	TContext
> => {
	const mutationOptions = getCreateLocationMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Edit Location
 */
export const editLocation = (locationUpdate: LocationUpdate, params: EditLocationParams) => {
	return getAxios<LocationResponse>({
		url: `/admin/locations/`,
		method: "PATCH",
		headers: { "Content-Type": "application/json" },
		data: locationUpdate,
		params,
	});
};

export const getEditLocationMutationOptions = <
	TError = ErrorType<HTTPValidationError>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof editLocation>>,
		TError,
		{ data: LocationUpdate; params: EditLocationParams },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof editLocation>>,
	TError,
	{ data: LocationUpdate; params: EditLocationParams },
	TContext
> => {
	const mutationKey = ["editLocation"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof editLocation>>,
		{ data: LocationUpdate; params: EditLocationParams }
	> = props => {
		const { data, params } = props ?? {};

		return editLocation(data, params);
	};

	return { mutationFn, ...mutationOptions };
};

export type EditLocationMutationResult = NonNullable<Awaited<ReturnType<typeof editLocation>>>;
export type EditLocationMutationBody = LocationUpdate;
export type EditLocationMutationError = ErrorType<HTTPValidationError>;

/**
 * @summary Edit Location
 */
export const useEditLocation = <TError = ErrorType<HTTPValidationError>, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof editLocation>>,
			TError,
			{ data: LocationUpdate; params: EditLocationParams },
			TContext
		>;
	},
	queryClient?: QueryClient
): UseMutationResult<
	Awaited<ReturnType<typeof editLocation>>,
	TError,
	{ data: LocationUpdate; params: EditLocationParams },
	TContext
> => {
	const mutationOptions = getEditLocationMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Delete Location
 */
export const deleteLocation = (params: DeleteLocationParams) => {
	return getAxios<SuccessResponse>({ url: `/admin/locations/`, method: "DELETE", params });
};

export const getDeleteLocationMutationOptions = <
	TError = ErrorType<HTTPValidationError>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof deleteLocation>>,
		TError,
		{ params: DeleteLocationParams },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof deleteLocation>>,
	TError,
	{ params: DeleteLocationParams },
	TContext
> => {
	const mutationKey = ["deleteLocation"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof deleteLocation>>,
		{ params: DeleteLocationParams }
	> = props => {
		const { params } = props ?? {};

		return deleteLocation(params);
	};

	return { mutationFn, ...mutationOptions };
};

export type DeleteLocationMutationResult = NonNullable<Awaited<ReturnType<typeof deleteLocation>>>;

export type DeleteLocationMutationError = ErrorType<HTTPValidationError>;

/**
 * @summary Delete Location
 */
export const useDeleteLocation = <TError = ErrorType<HTTPValidationError>, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof deleteLocation>>,
			TError,
			{ params: DeleteLocationParams },
			TContext
		>;
	},
	queryClient?: QueryClient
): UseMutationResult<
	Awaited<ReturnType<typeof deleteLocation>>,
	TError,
	{ params: DeleteLocationParams },
	TContext
> => {
	const mutationOptions = getDeleteLocationMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
