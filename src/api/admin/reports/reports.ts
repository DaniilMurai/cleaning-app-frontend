/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Neuer Standard Admin API
 * OpenAPI spec version: 0.1.0
 */
import { useMutation, useQuery, useSuspenseQuery } from "@tanstack/react-query";
import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseQueryResult,
	MutationFunction,
	QueryClient,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
	UseSuspenseQueryOptions,
	UseSuspenseQueryResult,
} from "@tanstack/react-query";

import type {
	DeleteReportParams,
	GetReportsParams,
	HTTPValidationError,
	ReportResponse,
	SuccessResponse,
	UpdateReport,
	UpdateReportParams,
} from ".././schemas";

import { getAxios } from "../../instance";
import type { ErrorType } from "../../instance";

/**
 * @summary Get Reports
 */
export const getReports = (params?: GetReportsParams, signal?: AbortSignal) => {
	return getAxios<ReportResponse[]>({ url: `/admin/reports/`, method: "GET", params, signal });
};

export const getGetReportsQueryKey = (params?: GetReportsParams) => {
	return [`/admin/reports/`, ...(params ? [params] : [])] as const;
};

export const getGetReportsQueryOptions = <
	TData = Awaited<ReturnType<typeof getReports>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetReportsParams,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getReports>>, TError, TData>>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetReportsQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getReports>>> = ({ signal }) =>
		getReports(params, signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getReports>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetReportsQueryResult = NonNullable<Awaited<ReturnType<typeof getReports>>>;
export type GetReportsQueryError = ErrorType<HTTPValidationError>;

export function useGetReports<
	TData = Awaited<ReturnType<typeof getReports>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params: undefined | GetReportsParams,
	options: {
		query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getReports>>, TError, TData>> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getReports>>,
					TError,
					Awaited<ReturnType<typeof getReports>>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetReports<
	TData = Awaited<ReturnType<typeof getReports>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetReportsParams,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getReports>>, TError, TData>> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getReports>>,
					TError,
					Awaited<ReturnType<typeof getReports>>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetReports<
	TData = Awaited<ReturnType<typeof getReports>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetReportsParams,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getReports>>, TError, TData>>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Reports
 */

export function useGetReports<
	TData = Awaited<ReturnType<typeof getReports>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetReportsParams,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getReports>>, TError, TData>>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getGetReportsQueryOptions(params, options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getGetReportsSuspenseQueryOptions = <
	TData = Awaited<ReturnType<typeof getReports>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetReportsParams,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getReports>>, TError, TData>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetReportsQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getReports>>> = ({ signal }) =>
		getReports(params, signal);

	return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
		Awaited<ReturnType<typeof getReports>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetReportsSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof getReports>>>;
export type GetReportsSuspenseQueryError = ErrorType<HTTPValidationError>;

export function useGetReportsSuspense<
	TData = Awaited<ReturnType<typeof getReports>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params: undefined | GetReportsParams,
	options: {
		query: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getReports>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetReportsSuspense<
	TData = Awaited<ReturnType<typeof getReports>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetReportsParams,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getReports>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetReportsSuspense<
	TData = Awaited<ReturnType<typeof getReports>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetReportsParams,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getReports>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Reports
 */

export function useGetReportsSuspense<
	TData = Awaited<ReturnType<typeof getReports>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetReportsParams,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getReports>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getGetReportsSuspenseQueryOptions(params, options);

	const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * @summary Update Report
 */
export const updateReport = (updateReport: UpdateReport, params: UpdateReportParams) => {
	return getAxios<ReportResponse>({
		url: `/admin/reports/`,
		method: "PATCH",
		headers: { "Content-Type": "application/json" },
		data: updateReport,
		params,
	});
};

export const getUpdateReportMutationOptions = <
	TError = ErrorType<HTTPValidationError>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof updateReport>>,
		TError,
		{ data: UpdateReport; params: UpdateReportParams },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof updateReport>>,
	TError,
	{ data: UpdateReport; params: UpdateReportParams },
	TContext
> => {
	const mutationKey = ["updateReport"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof updateReport>>,
		{ data: UpdateReport; params: UpdateReportParams }
	> = props => {
		const { data, params } = props ?? {};

		return updateReport(data, params);
	};

	return { mutationFn, ...mutationOptions };
};

export type UpdateReportMutationResult = NonNullable<Awaited<ReturnType<typeof updateReport>>>;
export type UpdateReportMutationBody = UpdateReport;
export type UpdateReportMutationError = ErrorType<HTTPValidationError>;

/**
 * @summary Update Report
 */
export const useUpdateReport = <TError = ErrorType<HTTPValidationError>, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof updateReport>>,
			TError,
			{ data: UpdateReport; params: UpdateReportParams },
			TContext
		>;
	},
	queryClient?: QueryClient
): UseMutationResult<
	Awaited<ReturnType<typeof updateReport>>,
	TError,
	{ data: UpdateReport; params: UpdateReportParams },
	TContext
> => {
	const mutationOptions = getUpdateReportMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Delete Report
 */
export const deleteReport = (params: DeleteReportParams) => {
	return getAxios<SuccessResponse>({ url: `/admin/reports/`, method: "DELETE", params });
};

export const getDeleteReportMutationOptions = <
	TError = ErrorType<HTTPValidationError>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof deleteReport>>,
		TError,
		{ params: DeleteReportParams },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof deleteReport>>,
	TError,
	{ params: DeleteReportParams },
	TContext
> => {
	const mutationKey = ["deleteReport"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof deleteReport>>,
		{ params: DeleteReportParams }
	> = props => {
		const { params } = props ?? {};

		return deleteReport(params);
	};

	return { mutationFn, ...mutationOptions };
};

export type DeleteReportMutationResult = NonNullable<Awaited<ReturnType<typeof deleteReport>>>;

export type DeleteReportMutationError = ErrorType<HTTPValidationError>;

/**
 * @summary Delete Report
 */
export const useDeleteReport = <TError = ErrorType<HTTPValidationError>, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof deleteReport>>,
			TError,
			{ params: DeleteReportParams },
			TContext
		>;
	},
	queryClient?: QueryClient
): UseMutationResult<
	Awaited<ReturnType<typeof deleteReport>>,
	TError,
	{ params: DeleteReportParams },
	TContext
> => {
	const mutationOptions = getDeleteReportMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
