/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Neuer Standard Admin API
 * OpenAPI spec version: 0.1.0
 */
import { useMutation, useQuery, useSuspenseQuery } from "@tanstack/react-query";
import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseQueryResult,
	MutationFunction,
	QueryClient,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
	UseSuspenseQueryOptions,
	UseSuspenseQueryResult,
} from "@tanstack/react-query";

import type {
	DeleteRoomTaskParams,
	EditRoomTaskParams,
	GetRoomTasksParams,
	HTTPValidationError,
	RoomTaskCreate,
	RoomTaskResponse,
	RoomTaskUpdate,
	SuccessResponse,
} from ".././schemas";

import { getAxios } from "../../instance";
import type { ErrorType } from "../../instance";

/**
 * @summary Get Room Tasks
 */
export const getRoomTasks = (params?: GetRoomTasksParams, signal?: AbortSignal) => {
	return getAxios<RoomTaskResponse[]>({
		url: `/admin/room-tasks/`,
		method: "GET",
		params,
		signal,
	});
};

export const getGetRoomTasksQueryKey = (params?: GetRoomTasksParams) => {
	return [`/admin/room-tasks/`, ...(params ? [params] : [])] as const;
};

export const getGetRoomTasksQueryOptions = <
	TData = Awaited<ReturnType<typeof getRoomTasks>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetRoomTasksParams,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getRoomTasks>>, TError, TData>>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetRoomTasksQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getRoomTasks>>> = ({ signal }) =>
		getRoomTasks(params, signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getRoomTasks>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetRoomTasksQueryResult = NonNullable<Awaited<ReturnType<typeof getRoomTasks>>>;
export type GetRoomTasksQueryError = ErrorType<HTTPValidationError>;

export function useGetRoomTasks<
	TData = Awaited<ReturnType<typeof getRoomTasks>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params: undefined | GetRoomTasksParams,
	options: {
		query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getRoomTasks>>, TError, TData>> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getRoomTasks>>,
					TError,
					Awaited<ReturnType<typeof getRoomTasks>>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetRoomTasks<
	TData = Awaited<ReturnType<typeof getRoomTasks>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetRoomTasksParams,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getRoomTasks>>, TError, TData>> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getRoomTasks>>,
					TError,
					Awaited<ReturnType<typeof getRoomTasks>>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetRoomTasks<
	TData = Awaited<ReturnType<typeof getRoomTasks>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetRoomTasksParams,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getRoomTasks>>, TError, TData>>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Room Tasks
 */

export function useGetRoomTasks<
	TData = Awaited<ReturnType<typeof getRoomTasks>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetRoomTasksParams,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getRoomTasks>>, TError, TData>>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getGetRoomTasksQueryOptions(params, options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getGetRoomTasksSuspenseQueryOptions = <
	TData = Awaited<ReturnType<typeof getRoomTasks>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetRoomTasksParams,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getRoomTasks>>, TError, TData>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetRoomTasksQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getRoomTasks>>> = ({ signal }) =>
		getRoomTasks(params, signal);

	return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
		Awaited<ReturnType<typeof getRoomTasks>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetRoomTasksSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof getRoomTasks>>>;
export type GetRoomTasksSuspenseQueryError = ErrorType<HTTPValidationError>;

export function useGetRoomTasksSuspense<
	TData = Awaited<ReturnType<typeof getRoomTasks>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params: undefined | GetRoomTasksParams,
	options: {
		query: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getRoomTasks>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetRoomTasksSuspense<
	TData = Awaited<ReturnType<typeof getRoomTasks>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetRoomTasksParams,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getRoomTasks>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetRoomTasksSuspense<
	TData = Awaited<ReturnType<typeof getRoomTasks>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetRoomTasksParams,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getRoomTasks>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Room Tasks
 */

export function useGetRoomTasksSuspense<
	TData = Awaited<ReturnType<typeof getRoomTasks>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetRoomTasksParams,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getRoomTasks>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getGetRoomTasksSuspenseQueryOptions(params, options);

	const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * @summary Create Room Task
 */
export const createRoomTask = (roomTaskCreate: RoomTaskCreate, signal?: AbortSignal) => {
	return getAxios<RoomTaskResponse>({
		url: `/admin/room-tasks/`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: roomTaskCreate,
		signal,
	});
};

export const getCreateRoomTaskMutationOptions = <
	TError = ErrorType<HTTPValidationError>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof createRoomTask>>,
		TError,
		{ data: RoomTaskCreate },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof createRoomTask>>,
	TError,
	{ data: RoomTaskCreate },
	TContext
> => {
	const mutationKey = ["createRoomTask"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof createRoomTask>>,
		{ data: RoomTaskCreate }
	> = props => {
		const { data } = props ?? {};

		return createRoomTask(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type CreateRoomTaskMutationResult = NonNullable<Awaited<ReturnType<typeof createRoomTask>>>;
export type CreateRoomTaskMutationBody = RoomTaskCreate;
export type CreateRoomTaskMutationError = ErrorType<HTTPValidationError>;

/**
 * @summary Create Room Task
 */
export const useCreateRoomTask = <TError = ErrorType<HTTPValidationError>, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof createRoomTask>>,
			TError,
			{ data: RoomTaskCreate },
			TContext
		>;
	},
	queryClient?: QueryClient
): UseMutationResult<
	Awaited<ReturnType<typeof createRoomTask>>,
	TError,
	{ data: RoomTaskCreate },
	TContext
> => {
	const mutationOptions = getCreateRoomTaskMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Edit Room Task
 */
export const editRoomTask = (roomTaskUpdate: RoomTaskUpdate, params: EditRoomTaskParams) => {
	return getAxios<RoomTaskResponse>({
		url: `/admin/room-tasks/`,
		method: "PATCH",
		headers: { "Content-Type": "application/json" },
		data: roomTaskUpdate,
		params,
	});
};

export const getEditRoomTaskMutationOptions = <
	TError = ErrorType<HTTPValidationError>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof editRoomTask>>,
		TError,
		{ data: RoomTaskUpdate; params: EditRoomTaskParams },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof editRoomTask>>,
	TError,
	{ data: RoomTaskUpdate; params: EditRoomTaskParams },
	TContext
> => {
	const mutationKey = ["editRoomTask"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof editRoomTask>>,
		{ data: RoomTaskUpdate; params: EditRoomTaskParams }
	> = props => {
		const { data, params } = props ?? {};

		return editRoomTask(data, params);
	};

	return { mutationFn, ...mutationOptions };
};

export type EditRoomTaskMutationResult = NonNullable<Awaited<ReturnType<typeof editRoomTask>>>;
export type EditRoomTaskMutationBody = RoomTaskUpdate;
export type EditRoomTaskMutationError = ErrorType<HTTPValidationError>;

/**
 * @summary Edit Room Task
 */
export const useEditRoomTask = <TError = ErrorType<HTTPValidationError>, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof editRoomTask>>,
			TError,
			{ data: RoomTaskUpdate; params: EditRoomTaskParams },
			TContext
		>;
	},
	queryClient?: QueryClient
): UseMutationResult<
	Awaited<ReturnType<typeof editRoomTask>>,
	TError,
	{ data: RoomTaskUpdate; params: EditRoomTaskParams },
	TContext
> => {
	const mutationOptions = getEditRoomTaskMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Delete Room Task
 */
export const deleteRoomTask = (params: DeleteRoomTaskParams) => {
	return getAxios<SuccessResponse>({ url: `/admin/room-tasks/`, method: "DELETE", params });
};

export const getDeleteRoomTaskMutationOptions = <
	TError = ErrorType<HTTPValidationError>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof deleteRoomTask>>,
		TError,
		{ params: DeleteRoomTaskParams },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof deleteRoomTask>>,
	TError,
	{ params: DeleteRoomTaskParams },
	TContext
> => {
	const mutationKey = ["deleteRoomTask"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof deleteRoomTask>>,
		{ params: DeleteRoomTaskParams }
	> = props => {
		const { params } = props ?? {};

		return deleteRoomTask(params);
	};

	return { mutationFn, ...mutationOptions };
};

export type DeleteRoomTaskMutationResult = NonNullable<Awaited<ReturnType<typeof deleteRoomTask>>>;

export type DeleteRoomTaskMutationError = ErrorType<HTTPValidationError>;

/**
 * @summary Delete Room Task
 */
export const useDeleteRoomTask = <TError = ErrorType<HTTPValidationError>, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof deleteRoomTask>>,
			TError,
			{ params: DeleteRoomTaskParams },
			TContext
		>;
	},
	queryClient?: QueryClient
): UseMutationResult<
	Awaited<ReturnType<typeof deleteRoomTask>>,
	TError,
	{ params: DeleteRoomTaskParams },
	TContext
> => {
	const mutationOptions = getDeleteRoomTaskMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
