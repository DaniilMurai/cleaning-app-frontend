/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Neuer Standard Admin API
 * OpenAPI spec version: 0.1.0
 */
import {
	useInfiniteQuery,
	useMutation,
	useQuery,
	useSuspenseInfiniteQuery,
	useSuspenseQuery,
} from "@tanstack/react-query";
import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseInfiniteQueryResult,
	DefinedUseQueryResult,
	InfiniteData,
	MutationFunction,
	QueryClient,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseInfiniteQueryOptions,
	UseInfiniteQueryResult,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
	UseSuspenseInfiniteQueryOptions,
	UseSuspenseInfiniteQueryResult,
	UseSuspenseQueryOptions,
	UseSuspenseQueryResult,
} from "@tanstack/react-query";

import type {
	DeleteRoomParams,
	EditRoomParams,
	GetRoomsParams,
	HTTPValidationError,
	RoomCreate,
	RoomResponse,
	RoomUpdate,
	SuccessResponse,
} from ".././schemas";

import { getAxios } from "../../instance";
import type { ErrorType } from "../../instance";

/**
 * @summary Get Rooms
 */
export const getRooms = (params?: GetRoomsParams, signal?: AbortSignal) => {
	return getAxios<RoomResponse[]>({ url: `/admin/rooms/`, method: "GET", params, signal });
};

export const getGetRoomsQueryKey = (params?: GetRoomsParams) => {
	return [`/admin/rooms/`, ...(params ? [params] : [])] as const;
};

export const getGetRoomsInfiniteQueryOptions = <
	TData = InfiniteData<Awaited<ReturnType<typeof getRooms>>, GetRoomsParams["offset"]>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetRoomsParams,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getRooms>>,
				TError,
				TData,
				Awaited<ReturnType<typeof getRooms>>,
				QueryKey,
				GetRoomsParams["offset"]
			>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetRoomsQueryKey(params);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof getRooms>>,
		QueryKey,
		GetRoomsParams["offset"]
	> = ({ signal, pageParam }) =>
		getRooms({ ...params, offset: pageParam || params?.["offset"] }, signal);

	return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
		Awaited<ReturnType<typeof getRooms>>,
		TError,
		TData,
		Awaited<ReturnType<typeof getRooms>>,
		QueryKey,
		GetRoomsParams["offset"]
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetRoomsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getRooms>>>;
export type GetRoomsInfiniteQueryError = ErrorType<HTTPValidationError>;

export function useGetRoomsInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getRooms>>, GetRoomsParams["offset"]>,
	TError = ErrorType<HTTPValidationError>,
>(
	params: undefined | GetRoomsParams,
	options: {
		query: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getRooms>>,
				TError,
				TData,
				Awaited<ReturnType<typeof getRooms>>,
				QueryKey,
				GetRoomsParams["offset"]
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getRooms>>,
					TError,
					Awaited<ReturnType<typeof getRooms>>,
					QueryKey
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetRoomsInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getRooms>>, GetRoomsParams["offset"]>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetRoomsParams,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getRooms>>,
				TError,
				TData,
				Awaited<ReturnType<typeof getRooms>>,
				QueryKey,
				GetRoomsParams["offset"]
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getRooms>>,
					TError,
					Awaited<ReturnType<typeof getRooms>>,
					QueryKey
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetRoomsInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getRooms>>, GetRoomsParams["offset"]>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetRoomsParams,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getRooms>>,
				TError,
				TData,
				Awaited<ReturnType<typeof getRooms>>,
				QueryKey,
				GetRoomsParams["offset"]
			>
		>;
	},
	queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Rooms
 */

export function useGetRoomsInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getRooms>>, GetRoomsParams["offset"]>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetRoomsParams,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getRooms>>,
				TError,
				TData,
				Awaited<ReturnType<typeof getRooms>>,
				QueryKey,
				GetRoomsParams["offset"]
			>
		>;
	},
	queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getGetRoomsInfiniteQueryOptions(params, options);

	const query = useInfiniteQuery(queryOptions, queryClient) as UseInfiniteQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getGetRoomsQueryOptions = <
	TData = Awaited<ReturnType<typeof getRooms>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetRoomsParams,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getRooms>>, TError, TData>>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetRoomsQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getRooms>>> = ({ signal }) =>
		getRooms(params, signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getRooms>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetRoomsQueryResult = NonNullable<Awaited<ReturnType<typeof getRooms>>>;
export type GetRoomsQueryError = ErrorType<HTTPValidationError>;

export function useGetRooms<
	TData = Awaited<ReturnType<typeof getRooms>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params: undefined | GetRoomsParams,
	options: {
		query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getRooms>>, TError, TData>> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getRooms>>,
					TError,
					Awaited<ReturnType<typeof getRooms>>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetRooms<
	TData = Awaited<ReturnType<typeof getRooms>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetRoomsParams,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getRooms>>, TError, TData>> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getRooms>>,
					TError,
					Awaited<ReturnType<typeof getRooms>>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetRooms<
	TData = Awaited<ReturnType<typeof getRooms>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetRoomsParams,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getRooms>>, TError, TData>>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Rooms
 */

export function useGetRooms<
	TData = Awaited<ReturnType<typeof getRooms>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetRoomsParams,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getRooms>>, TError, TData>>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getGetRoomsQueryOptions(params, options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getGetRoomsSuspenseQueryOptions = <
	TData = Awaited<ReturnType<typeof getRooms>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetRoomsParams,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getRooms>>, TError, TData>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetRoomsQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getRooms>>> = ({ signal }) =>
		getRooms(params, signal);

	return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
		Awaited<ReturnType<typeof getRooms>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetRoomsSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof getRooms>>>;
export type GetRoomsSuspenseQueryError = ErrorType<HTTPValidationError>;

export function useGetRoomsSuspense<
	TData = Awaited<ReturnType<typeof getRooms>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params: undefined | GetRoomsParams,
	options: {
		query: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getRooms>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetRoomsSuspense<
	TData = Awaited<ReturnType<typeof getRooms>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetRoomsParams,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getRooms>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetRoomsSuspense<
	TData = Awaited<ReturnType<typeof getRooms>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetRoomsParams,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getRooms>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Rooms
 */

export function useGetRoomsSuspense<
	TData = Awaited<ReturnType<typeof getRooms>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetRoomsParams,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getRooms>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getGetRoomsSuspenseQueryOptions(params, options);

	const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getGetRoomsSuspenseInfiniteQueryOptions = <
	TData = InfiniteData<Awaited<ReturnType<typeof getRooms>>, GetRoomsParams["offset"]>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetRoomsParams,
	options?: {
		query?: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getRooms>>,
				TError,
				TData,
				Awaited<ReturnType<typeof getRooms>>,
				QueryKey,
				GetRoomsParams["offset"]
			>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetRoomsQueryKey(params);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof getRooms>>,
		QueryKey,
		GetRoomsParams["offset"]
	> = ({ signal, pageParam }) =>
		getRooms({ ...params, offset: pageParam || params?.["offset"] }, signal);

	return { queryKey, queryFn, ...queryOptions } as UseSuspenseInfiniteQueryOptions<
		Awaited<ReturnType<typeof getRooms>>,
		TError,
		TData,
		Awaited<ReturnType<typeof getRooms>>,
		QueryKey,
		GetRoomsParams["offset"]
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetRoomsSuspenseInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getRooms>>>;
export type GetRoomsSuspenseInfiniteQueryError = ErrorType<HTTPValidationError>;

export function useGetRoomsSuspenseInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getRooms>>, GetRoomsParams["offset"]>,
	TError = ErrorType<HTTPValidationError>,
>(
	params: undefined | GetRoomsParams,
	options: {
		query: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getRooms>>,
				TError,
				TData,
				Awaited<ReturnType<typeof getRooms>>,
				QueryKey,
				GetRoomsParams["offset"]
			>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetRoomsSuspenseInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getRooms>>, GetRoomsParams["offset"]>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetRoomsParams,
	options?: {
		query?: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getRooms>>,
				TError,
				TData,
				Awaited<ReturnType<typeof getRooms>>,
				QueryKey,
				GetRoomsParams["offset"]
			>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetRoomsSuspenseInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getRooms>>, GetRoomsParams["offset"]>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetRoomsParams,
	options?: {
		query?: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getRooms>>,
				TError,
				TData,
				Awaited<ReturnType<typeof getRooms>>,
				QueryKey,
				GetRoomsParams["offset"]
			>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Rooms
 */

export function useGetRoomsSuspenseInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getRooms>>, GetRoomsParams["offset"]>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetRoomsParams,
	options?: {
		query?: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getRooms>>,
				TError,
				TData,
				Awaited<ReturnType<typeof getRooms>>,
				QueryKey,
				GetRoomsParams["offset"]
			>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getGetRoomsSuspenseInfiniteQueryOptions(params, options);

	const query = useSuspenseInfiniteQuery(
		queryOptions,
		queryClient
	) as UseSuspenseInfiniteQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * @summary Create Room
 */
export const createRoom = (roomCreate: RoomCreate, signal?: AbortSignal) => {
	return getAxios<RoomResponse>({
		url: `/admin/rooms/`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: roomCreate,
		signal,
	});
};

export const getCreateRoomMutationOptions = <
	TError = ErrorType<HTTPValidationError>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof createRoom>>,
		TError,
		{ data: RoomCreate },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof createRoom>>,
	TError,
	{ data: RoomCreate },
	TContext
> => {
	const mutationKey = ["createRoom"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof createRoom>>,
		{ data: RoomCreate }
	> = props => {
		const { data } = props ?? {};

		return createRoom(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type CreateRoomMutationResult = NonNullable<Awaited<ReturnType<typeof createRoom>>>;
export type CreateRoomMutationBody = RoomCreate;
export type CreateRoomMutationError = ErrorType<HTTPValidationError>;

/**
 * @summary Create Room
 */
export const useCreateRoom = <TError = ErrorType<HTTPValidationError>, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof createRoom>>,
			TError,
			{ data: RoomCreate },
			TContext
		>;
	},
	queryClient?: QueryClient
): UseMutationResult<
	Awaited<ReturnType<typeof createRoom>>,
	TError,
	{ data: RoomCreate },
	TContext
> => {
	const mutationOptions = getCreateRoomMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Edit Room
 */
export const editRoom = (roomUpdate: RoomUpdate, params: EditRoomParams) => {
	return getAxios<RoomResponse>({
		url: `/admin/rooms/`,
		method: "PATCH",
		headers: { "Content-Type": "application/json" },
		data: roomUpdate,
		params,
	});
};

export const getEditRoomMutationOptions = <
	TError = ErrorType<HTTPValidationError>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof editRoom>>,
		TError,
		{ data: RoomUpdate; params: EditRoomParams },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof editRoom>>,
	TError,
	{ data: RoomUpdate; params: EditRoomParams },
	TContext
> => {
	const mutationKey = ["editRoom"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof editRoom>>,
		{ data: RoomUpdate; params: EditRoomParams }
	> = props => {
		const { data, params } = props ?? {};

		return editRoom(data, params);
	};

	return { mutationFn, ...mutationOptions };
};

export type EditRoomMutationResult = NonNullable<Awaited<ReturnType<typeof editRoom>>>;
export type EditRoomMutationBody = RoomUpdate;
export type EditRoomMutationError = ErrorType<HTTPValidationError>;

/**
 * @summary Edit Room
 */
export const useEditRoom = <TError = ErrorType<HTTPValidationError>, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof editRoom>>,
			TError,
			{ data: RoomUpdate; params: EditRoomParams },
			TContext
		>;
	},
	queryClient?: QueryClient
): UseMutationResult<
	Awaited<ReturnType<typeof editRoom>>,
	TError,
	{ data: RoomUpdate; params: EditRoomParams },
	TContext
> => {
	const mutationOptions = getEditRoomMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Delete Room
 */
export const deleteRoom = (params: DeleteRoomParams) => {
	return getAxios<SuccessResponse>({ url: `/admin/rooms/`, method: "DELETE", params });
};

export const getDeleteRoomMutationOptions = <
	TError = ErrorType<HTTPValidationError>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof deleteRoom>>,
		TError,
		{ params: DeleteRoomParams },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof deleteRoom>>,
	TError,
	{ params: DeleteRoomParams },
	TContext
> => {
	const mutationKey = ["deleteRoom"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof deleteRoom>>,
		{ params: DeleteRoomParams }
	> = props => {
		const { params } = props ?? {};

		return deleteRoom(params);
	};

	return { mutationFn, ...mutationOptions };
};

export type DeleteRoomMutationResult = NonNullable<Awaited<ReturnType<typeof deleteRoom>>>;

export type DeleteRoomMutationError = ErrorType<HTTPValidationError>;

/**
 * @summary Delete Room
 */
export const useDeleteRoom = <TError = ErrorType<HTTPValidationError>, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof deleteRoom>>,
			TError,
			{ params: DeleteRoomParams },
			TContext
		>;
	},
	queryClient?: QueryClient
): UseMutationResult<
	Awaited<ReturnType<typeof deleteRoom>>,
	TError,
	{ params: DeleteRoomParams },
	TContext
> => {
	const mutationOptions = getDeleteRoomMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
