/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Neuer Standard Admin API
 * OpenAPI spec version: 0.1.0
 */
import {
	useInfiniteQuery,
	useMutation,
	useQuery,
	useSuspenseInfiniteQuery,
	useSuspenseQuery,
} from "@tanstack/react-query";
import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseInfiniteQueryResult,
	DefinedUseQueryResult,
	InfiniteData,
	MutationFunction,
	QueryClient,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseInfiniteQueryOptions,
	UseInfiniteQueryResult,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
	UseSuspenseInfiniteQueryOptions,
	UseSuspenseInfiniteQueryResult,
	UseSuspenseQueryOptions,
	UseSuspenseQueryResult,
} from "@tanstack/react-query";

import type {
	DeleteTaskParams,
	EditTaskParams,
	GetTasksParams,
	HTTPValidationError,
	SuccessResponse,
	TaskCreate,
	TaskResponse,
	TaskUpdate,
} from ".././schemas";

import { getAxios } from "../../instance";
import type { ErrorType } from "../../instance";

/**
 * @summary Get Tasks
 */
export const getTasks = (params?: GetTasksParams, signal?: AbortSignal) => {
	return getAxios<TaskResponse[]>({ url: `/admin/tasks/`, method: "GET", params, signal });
};

export const getGetTasksQueryKey = (params?: GetTasksParams) => {
	return [`/admin/tasks/`, ...(params ? [params] : [])] as const;
};

export const getGetTasksInfiniteQueryOptions = <
	TData = InfiniteData<Awaited<ReturnType<typeof getTasks>>, GetTasksParams["offset"]>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetTasksParams,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getTasks>>,
				TError,
				TData,
				Awaited<ReturnType<typeof getTasks>>,
				QueryKey,
				GetTasksParams["offset"]
			>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetTasksQueryKey(params);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof getTasks>>,
		QueryKey,
		GetTasksParams["offset"]
	> = ({ signal, pageParam }) =>
		getTasks({ ...params, offset: pageParam || params?.["offset"] }, signal);

	return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
		Awaited<ReturnType<typeof getTasks>>,
		TError,
		TData,
		Awaited<ReturnType<typeof getTasks>>,
		QueryKey,
		GetTasksParams["offset"]
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetTasksInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getTasks>>>;
export type GetTasksInfiniteQueryError = ErrorType<HTTPValidationError>;

export function useGetTasksInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getTasks>>, GetTasksParams["offset"]>,
	TError = ErrorType<HTTPValidationError>,
>(
	params: undefined | GetTasksParams,
	options: {
		query: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getTasks>>,
				TError,
				TData,
				Awaited<ReturnType<typeof getTasks>>,
				QueryKey,
				GetTasksParams["offset"]
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getTasks>>,
					TError,
					Awaited<ReturnType<typeof getTasks>>,
					QueryKey
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetTasksInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getTasks>>, GetTasksParams["offset"]>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetTasksParams,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getTasks>>,
				TError,
				TData,
				Awaited<ReturnType<typeof getTasks>>,
				QueryKey,
				GetTasksParams["offset"]
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getTasks>>,
					TError,
					Awaited<ReturnType<typeof getTasks>>,
					QueryKey
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetTasksInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getTasks>>, GetTasksParams["offset"]>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetTasksParams,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getTasks>>,
				TError,
				TData,
				Awaited<ReturnType<typeof getTasks>>,
				QueryKey,
				GetTasksParams["offset"]
			>
		>;
	},
	queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Tasks
 */

export function useGetTasksInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getTasks>>, GetTasksParams["offset"]>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetTasksParams,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getTasks>>,
				TError,
				TData,
				Awaited<ReturnType<typeof getTasks>>,
				QueryKey,
				GetTasksParams["offset"]
			>
		>;
	},
	queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getGetTasksInfiniteQueryOptions(params, options);

	const query = useInfiniteQuery(queryOptions, queryClient) as UseInfiniteQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getGetTasksQueryOptions = <
	TData = Awaited<ReturnType<typeof getTasks>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetTasksParams,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTasks>>, TError, TData>>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetTasksQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getTasks>>> = ({ signal }) =>
		getTasks(params, signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getTasks>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetTasksQueryResult = NonNullable<Awaited<ReturnType<typeof getTasks>>>;
export type GetTasksQueryError = ErrorType<HTTPValidationError>;

export function useGetTasks<
	TData = Awaited<ReturnType<typeof getTasks>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params: undefined | GetTasksParams,
	options: {
		query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTasks>>, TError, TData>> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getTasks>>,
					TError,
					Awaited<ReturnType<typeof getTasks>>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetTasks<
	TData = Awaited<ReturnType<typeof getTasks>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetTasksParams,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTasks>>, TError, TData>> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getTasks>>,
					TError,
					Awaited<ReturnType<typeof getTasks>>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetTasks<
	TData = Awaited<ReturnType<typeof getTasks>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetTasksParams,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTasks>>, TError, TData>>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Tasks
 */

export function useGetTasks<
	TData = Awaited<ReturnType<typeof getTasks>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetTasksParams,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTasks>>, TError, TData>>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getGetTasksQueryOptions(params, options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getGetTasksSuspenseQueryOptions = <
	TData = Awaited<ReturnType<typeof getTasks>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetTasksParams,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getTasks>>, TError, TData>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetTasksQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getTasks>>> = ({ signal }) =>
		getTasks(params, signal);

	return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
		Awaited<ReturnType<typeof getTasks>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetTasksSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof getTasks>>>;
export type GetTasksSuspenseQueryError = ErrorType<HTTPValidationError>;

export function useGetTasksSuspense<
	TData = Awaited<ReturnType<typeof getTasks>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params: undefined | GetTasksParams,
	options: {
		query: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getTasks>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetTasksSuspense<
	TData = Awaited<ReturnType<typeof getTasks>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetTasksParams,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getTasks>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetTasksSuspense<
	TData = Awaited<ReturnType<typeof getTasks>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetTasksParams,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getTasks>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Tasks
 */

export function useGetTasksSuspense<
	TData = Awaited<ReturnType<typeof getTasks>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetTasksParams,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getTasks>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getGetTasksSuspenseQueryOptions(params, options);

	const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getGetTasksSuspenseInfiniteQueryOptions = <
	TData = InfiniteData<Awaited<ReturnType<typeof getTasks>>, GetTasksParams["offset"]>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetTasksParams,
	options?: {
		query?: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getTasks>>,
				TError,
				TData,
				Awaited<ReturnType<typeof getTasks>>,
				QueryKey,
				GetTasksParams["offset"]
			>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetTasksQueryKey(params);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof getTasks>>,
		QueryKey,
		GetTasksParams["offset"]
	> = ({ signal, pageParam }) =>
		getTasks({ ...params, offset: pageParam || params?.["offset"] }, signal);

	return { queryKey, queryFn, ...queryOptions } as UseSuspenseInfiniteQueryOptions<
		Awaited<ReturnType<typeof getTasks>>,
		TError,
		TData,
		Awaited<ReturnType<typeof getTasks>>,
		QueryKey,
		GetTasksParams["offset"]
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetTasksSuspenseInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getTasks>>>;
export type GetTasksSuspenseInfiniteQueryError = ErrorType<HTTPValidationError>;

export function useGetTasksSuspenseInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getTasks>>, GetTasksParams["offset"]>,
	TError = ErrorType<HTTPValidationError>,
>(
	params: undefined | GetTasksParams,
	options: {
		query: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getTasks>>,
				TError,
				TData,
				Awaited<ReturnType<typeof getTasks>>,
				QueryKey,
				GetTasksParams["offset"]
			>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetTasksSuspenseInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getTasks>>, GetTasksParams["offset"]>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetTasksParams,
	options?: {
		query?: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getTasks>>,
				TError,
				TData,
				Awaited<ReturnType<typeof getTasks>>,
				QueryKey,
				GetTasksParams["offset"]
			>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetTasksSuspenseInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getTasks>>, GetTasksParams["offset"]>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetTasksParams,
	options?: {
		query?: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getTasks>>,
				TError,
				TData,
				Awaited<ReturnType<typeof getTasks>>,
				QueryKey,
				GetTasksParams["offset"]
			>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Tasks
 */

export function useGetTasksSuspenseInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getTasks>>, GetTasksParams["offset"]>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetTasksParams,
	options?: {
		query?: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getTasks>>,
				TError,
				TData,
				Awaited<ReturnType<typeof getTasks>>,
				QueryKey,
				GetTasksParams["offset"]
			>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getGetTasksSuspenseInfiniteQueryOptions(params, options);

	const query = useSuspenseInfiniteQuery(
		queryOptions,
		queryClient
	) as UseSuspenseInfiniteQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * @summary Create Task
 */
export const createTask = (taskCreate: TaskCreate, signal?: AbortSignal) => {
	return getAxios<TaskResponse>({
		url: `/admin/tasks/`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: taskCreate,
		signal,
	});
};

export const getCreateTaskMutationOptions = <
	TError = ErrorType<HTTPValidationError>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof createTask>>,
		TError,
		{ data: TaskCreate },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof createTask>>,
	TError,
	{ data: TaskCreate },
	TContext
> => {
	const mutationKey = ["createTask"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof createTask>>,
		{ data: TaskCreate }
	> = props => {
		const { data } = props ?? {};

		return createTask(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type CreateTaskMutationResult = NonNullable<Awaited<ReturnType<typeof createTask>>>;
export type CreateTaskMutationBody = TaskCreate;
export type CreateTaskMutationError = ErrorType<HTTPValidationError>;

/**
 * @summary Create Task
 */
export const useCreateTask = <TError = ErrorType<HTTPValidationError>, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof createTask>>,
			TError,
			{ data: TaskCreate },
			TContext
		>;
	},
	queryClient?: QueryClient
): UseMutationResult<
	Awaited<ReturnType<typeof createTask>>,
	TError,
	{ data: TaskCreate },
	TContext
> => {
	const mutationOptions = getCreateTaskMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Edit Task
 */
export const editTask = (taskUpdate: TaskUpdate, params: EditTaskParams) => {
	return getAxios<TaskResponse>({
		url: `/admin/tasks/`,
		method: "PATCH",
		headers: { "Content-Type": "application/json" },
		data: taskUpdate,
		params,
	});
};

export const getEditTaskMutationOptions = <
	TError = ErrorType<HTTPValidationError>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof editTask>>,
		TError,
		{ data: TaskUpdate; params: EditTaskParams },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof editTask>>,
	TError,
	{ data: TaskUpdate; params: EditTaskParams },
	TContext
> => {
	const mutationKey = ["editTask"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof editTask>>,
		{ data: TaskUpdate; params: EditTaskParams }
	> = props => {
		const { data, params } = props ?? {};

		return editTask(data, params);
	};

	return { mutationFn, ...mutationOptions };
};

export type EditTaskMutationResult = NonNullable<Awaited<ReturnType<typeof editTask>>>;
export type EditTaskMutationBody = TaskUpdate;
export type EditTaskMutationError = ErrorType<HTTPValidationError>;

/**
 * @summary Edit Task
 */
export const useEditTask = <TError = ErrorType<HTTPValidationError>, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof editTask>>,
			TError,
			{ data: TaskUpdate; params: EditTaskParams },
			TContext
		>;
	},
	queryClient?: QueryClient
): UseMutationResult<
	Awaited<ReturnType<typeof editTask>>,
	TError,
	{ data: TaskUpdate; params: EditTaskParams },
	TContext
> => {
	const mutationOptions = getEditTaskMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Delete Task
 */
export const deleteTask = (params: DeleteTaskParams) => {
	return getAxios<SuccessResponse>({ url: `/admin/tasks/`, method: "DELETE", params });
};

export const getDeleteTaskMutationOptions = <
	TError = ErrorType<HTTPValidationError>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof deleteTask>>,
		TError,
		{ params: DeleteTaskParams },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof deleteTask>>,
	TError,
	{ params: DeleteTaskParams },
	TContext
> => {
	const mutationKey = ["deleteTask"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof deleteTask>>,
		{ params: DeleteTaskParams }
	> = props => {
		const { params } = props ?? {};

		return deleteTask(params);
	};

	return { mutationFn, ...mutationOptions };
};

export type DeleteTaskMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTask>>>;

export type DeleteTaskMutationError = ErrorType<HTTPValidationError>;

/**
 * @summary Delete Task
 */
export const useDeleteTask = <TError = ErrorType<HTTPValidationError>, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof deleteTask>>,
			TError,
			{ params: DeleteTaskParams },
			TContext
		>;
	},
	queryClient?: QueryClient
): UseMutationResult<
	Awaited<ReturnType<typeof deleteTask>>,
	TError,
	{ params: DeleteTaskParams },
	TContext
> => {
	const mutationOptions = getDeleteTaskMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
