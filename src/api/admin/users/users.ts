/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Neuer Standard Admin API
 * OpenAPI spec version: 0.1.0
 */
import { useMutation, useQuery, useSuspenseQuery } from "@tanstack/react-query";
import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseQueryResult,
	MutationFunction,
	QueryClient,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
	UseSuspenseQueryOptions,
	UseSuspenseQueryResult,
} from "@tanstack/react-query";

import type {
	DeleteUserParams,
	GetUsersParams,
	HTTPValidationError,
	InviteLink,
	RegisterUserData,
	SuccessResponse,
	UpdateUserParams,
	UserSchema,
	UserUpdateData,
} from ".././schemas";

import { getAxios } from "../../instance";
import type { ErrorType } from "../../instance";

/**
 * @summary Get Users
 */
export const getUsers = (params?: GetUsersParams, signal?: AbortSignal) => {
	return getAxios<UserSchema[]>({ url: `/user/users/`, method: "GET", params, signal });
};

export const getGetUsersQueryKey = (params?: GetUsersParams) => {
	return [`/user/users/`, ...(params ? [params] : [])] as const;
};

export const getGetUsersQueryOptions = <
	TData = Awaited<ReturnType<typeof getUsers>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetUsersParams,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData>>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetUsersQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsers>>> = ({ signal }) =>
		getUsers(params, signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getUsers>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetUsersQueryResult = NonNullable<Awaited<ReturnType<typeof getUsers>>>;
export type GetUsersQueryError = ErrorType<HTTPValidationError>;

export function useGetUsers<
	TData = Awaited<ReturnType<typeof getUsers>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params: undefined | GetUsersParams,
	options: {
		query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData>> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getUsers>>,
					TError,
					Awaited<ReturnType<typeof getUsers>>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetUsers<
	TData = Awaited<ReturnType<typeof getUsers>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetUsersParams,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData>> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getUsers>>,
					TError,
					Awaited<ReturnType<typeof getUsers>>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetUsers<
	TData = Awaited<ReturnType<typeof getUsers>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetUsersParams,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData>>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Users
 */

export function useGetUsers<
	TData = Awaited<ReturnType<typeof getUsers>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetUsersParams,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData>>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getGetUsersQueryOptions(params, options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getGetUsersSuspenseQueryOptions = <
	TData = Awaited<ReturnType<typeof getUsers>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetUsersParams,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetUsersQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsers>>> = ({ signal }) =>
		getUsers(params, signal);

	return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
		Awaited<ReturnType<typeof getUsers>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetUsersSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof getUsers>>>;
export type GetUsersSuspenseQueryError = ErrorType<HTTPValidationError>;

export function useGetUsersSuspense<
	TData = Awaited<ReturnType<typeof getUsers>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params: undefined | GetUsersParams,
	options: {
		query: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetUsersSuspense<
	TData = Awaited<ReturnType<typeof getUsers>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetUsersParams,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetUsersSuspense<
	TData = Awaited<ReturnType<typeof getUsers>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetUsersParams,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Users
 */

export function useGetUsersSuspense<
	TData = Awaited<ReturnType<typeof getUsers>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params?: GetUsersParams,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getGetUsersSuspenseQueryOptions(params, options);

	const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * @summary Create User
 */
export const createUser = (registerUserData: RegisterUserData, signal?: AbortSignal) => {
	return getAxios<InviteLink>({
		url: `/user/users/`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: registerUserData,
		signal,
	});
};

export const getCreateUserMutationOptions = <
	TError = ErrorType<HTTPValidationError>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof createUser>>,
		TError,
		{ data: RegisterUserData },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof createUser>>,
	TError,
	{ data: RegisterUserData },
	TContext
> => {
	const mutationKey = ["createUser"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof createUser>>,
		{ data: RegisterUserData }
	> = props => {
		const { data } = props ?? {};

		return createUser(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type CreateUserMutationResult = NonNullable<Awaited<ReturnType<typeof createUser>>>;
export type CreateUserMutationBody = RegisterUserData;
export type CreateUserMutationError = ErrorType<HTTPValidationError>;

/**
 * @summary Create User
 */
export const useCreateUser = <TError = ErrorType<HTTPValidationError>, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof createUser>>,
			TError,
			{ data: RegisterUserData },
			TContext
		>;
	},
	queryClient?: QueryClient
): UseMutationResult<
	Awaited<ReturnType<typeof createUser>>,
	TError,
	{ data: RegisterUserData },
	TContext
> => {
	const mutationOptions = getCreateUserMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Update User
 */
export const updateUser = (userUpdateData: UserUpdateData, params: UpdateUserParams) => {
	return getAxios<UserSchema>({
		url: `/user/users/`,
		method: "PATCH",
		headers: { "Content-Type": "application/json" },
		data: userUpdateData,
		params,
	});
};

export const getUpdateUserMutationOptions = <
	TError = ErrorType<HTTPValidationError>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof updateUser>>,
		TError,
		{ data: UserUpdateData; params: UpdateUserParams },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof updateUser>>,
	TError,
	{ data: UserUpdateData; params: UpdateUserParams },
	TContext
> => {
	const mutationKey = ["updateUser"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof updateUser>>,
		{ data: UserUpdateData; params: UpdateUserParams }
	> = props => {
		const { data, params } = props ?? {};

		return updateUser(data, params);
	};

	return { mutationFn, ...mutationOptions };
};

export type UpdateUserMutationResult = NonNullable<Awaited<ReturnType<typeof updateUser>>>;
export type UpdateUserMutationBody = UserUpdateData;
export type UpdateUserMutationError = ErrorType<HTTPValidationError>;

/**
 * @summary Update User
 */
export const useUpdateUser = <TError = ErrorType<HTTPValidationError>, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof updateUser>>,
			TError,
			{ data: UserUpdateData; params: UpdateUserParams },
			TContext
		>;
	},
	queryClient?: QueryClient
): UseMutationResult<
	Awaited<ReturnType<typeof updateUser>>,
	TError,
	{ data: UserUpdateData; params: UpdateUserParams },
	TContext
> => {
	const mutationOptions = getUpdateUserMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Delete User
 */
export const deleteUser = (params: DeleteUserParams) => {
	return getAxios<SuccessResponse>({ url: `/user/users/`, method: "DELETE", params });
};

export const getDeleteUserMutationOptions = <
	TError = ErrorType<HTTPValidationError>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof deleteUser>>,
		TError,
		{ params: DeleteUserParams },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof deleteUser>>,
	TError,
	{ params: DeleteUserParams },
	TContext
> => {
	const mutationKey = ["deleteUser"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof deleteUser>>,
		{ params: DeleteUserParams }
	> = props => {
		const { params } = props ?? {};

		return deleteUser(params);
	};

	return { mutationFn, ...mutationOptions };
};

export type DeleteUserMutationResult = NonNullable<Awaited<ReturnType<typeof deleteUser>>>;

export type DeleteUserMutationError = ErrorType<HTTPValidationError>;

/**
 * @summary Delete User
 */
export const useDeleteUser = <TError = ErrorType<HTTPValidationError>, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof deleteUser>>,
			TError,
			{ params: DeleteUserParams },
			TContext
		>;
	},
	queryClient?: QueryClient
): UseMutationResult<
	Awaited<ReturnType<typeof deleteUser>>,
	TError,
	{ params: DeleteUserParams },
	TContext
> => {
	const mutationOptions = getDeleteUserMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
