/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Neuer Standard Auth API
 * OpenAPI spec version: 0.1.0
 */
import { useMutation } from "@tanstack/react-query";
import type {
	MutationFunction,
	QueryClient,
	UseMutationOptions,
	UseMutationResult,
} from "@tanstack/react-query";

import type {
	ActivateUserData,
	HTTPValidationError,
	LoginData,
	RefreshTokenData,
	TokenPair,
} from ".././schemas";

import { getAxios } from "../../instance";
import type { ErrorType } from "../../instance";

/**
 * @summary Login
 */
export const login = (loginData: LoginData, signal?: AbortSignal) => {
	return getAxios<TokenPair>({
		url: `/auth/auth/login`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: loginData,
		signal,
	});
};

export const getLoginMutationOptions = <
	TError = ErrorType<HTTPValidationError>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof login>>,
		TError,
		{ data: LoginData },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof login>>,
	TError,
	{ data: LoginData },
	TContext
> => {
	const mutationKey = ["login"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof login>>,
		{ data: LoginData }
	> = props => {
		const { data } = props ?? {};

		return login(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type LoginMutationResult = NonNullable<Awaited<ReturnType<typeof login>>>;
export type LoginMutationBody = LoginData;
export type LoginMutationError = ErrorType<HTTPValidationError>;

/**
 * @summary Login
 */
export const useLogin = <TError = ErrorType<HTTPValidationError>, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof login>>,
			TError,
			{ data: LoginData },
			TContext
		>;
	},
	queryClient?: QueryClient
): UseMutationResult<Awaited<ReturnType<typeof login>>, TError, { data: LoginData }, TContext> => {
	const mutationOptions = getLoginMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Activate
 */
export const activate = (activateUserData: ActivateUserData, signal?: AbortSignal) => {
	return getAxios<TokenPair>({
		url: `/auth/auth/activate`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: activateUserData,
		signal,
	});
};

export const getActivateMutationOptions = <
	TError = ErrorType<HTTPValidationError>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof activate>>,
		TError,
		{ data: ActivateUserData },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof activate>>,
	TError,
	{ data: ActivateUserData },
	TContext
> => {
	const mutationKey = ["activate"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof activate>>,
		{ data: ActivateUserData }
	> = props => {
		const { data } = props ?? {};

		return activate(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type ActivateMutationResult = NonNullable<Awaited<ReturnType<typeof activate>>>;
export type ActivateMutationBody = ActivateUserData;
export type ActivateMutationError = ErrorType<HTTPValidationError>;

/**
 * @summary Activate
 */
export const useActivate = <TError = ErrorType<HTTPValidationError>, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof activate>>,
			TError,
			{ data: ActivateUserData },
			TContext
		>;
	},
	queryClient?: QueryClient
): UseMutationResult<
	Awaited<ReturnType<typeof activate>>,
	TError,
	{ data: ActivateUserData },
	TContext
> => {
	const mutationOptions = getActivateMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Refresh Tokens
 */
export const refreshTokens = (refreshTokenData: RefreshTokenData, signal?: AbortSignal) => {
	return getAxios<TokenPair>({
		url: `/auth/auth/refresh_tokens`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: refreshTokenData,
		signal,
	});
};

export const getRefreshTokensMutationOptions = <
	TError = ErrorType<HTTPValidationError>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof refreshTokens>>,
		TError,
		{ data: RefreshTokenData },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof refreshTokens>>,
	TError,
	{ data: RefreshTokenData },
	TContext
> => {
	const mutationKey = ["refreshTokens"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof refreshTokens>>,
		{ data: RefreshTokenData }
	> = props => {
		const { data } = props ?? {};

		return refreshTokens(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type RefreshTokensMutationResult = NonNullable<Awaited<ReturnType<typeof refreshTokens>>>;
export type RefreshTokensMutationBody = RefreshTokenData;
export type RefreshTokensMutationError = ErrorType<HTTPValidationError>;

/**
 * @summary Refresh Tokens
 */
export const useRefreshTokens = <TError = ErrorType<HTTPValidationError>, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof refreshTokens>>,
			TError,
			{ data: RefreshTokenData },
			TContext
		>;
	},
	queryClient?: QueryClient
): UseMutationResult<
	Awaited<ReturnType<typeof refreshTokens>>,
	TError,
	{ data: RefreshTokenData },
	TContext
> => {
	const mutationOptions = getRefreshTokensMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
