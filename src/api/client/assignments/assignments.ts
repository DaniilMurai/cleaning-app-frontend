/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Neuer Standart Client API
 * OpenAPI spec version: 0.1.0
 */
import { useMutation, useQuery, useSuspenseQuery } from "@tanstack/react-query";
import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseQueryResult,
	MutationFunction,
	QueryClient,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
	UseSuspenseQueryOptions,
	UseSuspenseQueryResult,
} from "@tanstack/react-query";

import type {
	AssignmentReportResponse,
	DailyAssignmentForUserResponse,
	DailyAssignmentForUserUpdate,
	GetDailyAssignmentByIdParams,
	HTTPValidationError,
	UpdateDailyAssignmentParams,
	UpdateDailyAssignmentStatusParams,
} from ".././schemas";

import { getAxios } from "../../instance";
import type { ErrorType } from "../../instance";

/**
 * @summary Get Daily Assignments
 */
export const getDailyAssignments = (signal?: AbortSignal) => {
	return getAxios<DailyAssignmentForUserResponse[]>({
		url: `/client/assignments/daily-assignments`,
		method: "GET",
		signal,
	});
};

export const getGetDailyAssignmentsQueryKey = () => {
	return [`/client/assignments/daily-assignments`] as const;
};

export const getGetDailyAssignmentsQueryOptions = <
	TData = Awaited<ReturnType<typeof getDailyAssignments>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof getDailyAssignments>>, TError, TData>
	>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetDailyAssignmentsQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getDailyAssignments>>> = ({ signal }) =>
		getDailyAssignments(signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getDailyAssignments>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetDailyAssignmentsQueryResult = NonNullable<
	Awaited<ReturnType<typeof getDailyAssignments>>
>;
export type GetDailyAssignmentsQueryError = ErrorType<unknown>;

export function useGetDailyAssignments<
	TData = Awaited<ReturnType<typeof getDailyAssignments>>,
	TError = ErrorType<unknown>,
>(
	options: {
		query: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getDailyAssignments>>, TError, TData>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getDailyAssignments>>,
					TError,
					Awaited<ReturnType<typeof getDailyAssignments>>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetDailyAssignments<
	TData = Awaited<ReturnType<typeof getDailyAssignments>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getDailyAssignments>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getDailyAssignments>>,
					TError,
					Awaited<ReturnType<typeof getDailyAssignments>>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetDailyAssignments<
	TData = Awaited<ReturnType<typeof getDailyAssignments>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getDailyAssignments>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Daily Assignments
 */

export function useGetDailyAssignments<
	TData = Awaited<ReturnType<typeof getDailyAssignments>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getDailyAssignments>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getGetDailyAssignmentsQueryOptions(options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getGetDailyAssignmentsSuspenseQueryOptions = <
	TData = Awaited<ReturnType<typeof getDailyAssignments>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseSuspenseQueryOptions<Awaited<ReturnType<typeof getDailyAssignments>>, TError, TData>
	>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetDailyAssignmentsQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getDailyAssignments>>> = ({ signal }) =>
		getDailyAssignments(signal);

	return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
		Awaited<ReturnType<typeof getDailyAssignments>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetDailyAssignmentsSuspenseQueryResult = NonNullable<
	Awaited<ReturnType<typeof getDailyAssignments>>
>;
export type GetDailyAssignmentsSuspenseQueryError = ErrorType<unknown>;

export function useGetDailyAssignmentsSuspense<
	TData = Awaited<ReturnType<typeof getDailyAssignments>>,
	TError = ErrorType<unknown>,
>(
	options: {
		query: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getDailyAssignments>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetDailyAssignmentsSuspense<
	TData = Awaited<ReturnType<typeof getDailyAssignments>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getDailyAssignments>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetDailyAssignmentsSuspense<
	TData = Awaited<ReturnType<typeof getDailyAssignments>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getDailyAssignments>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Daily Assignments
 */

export function useGetDailyAssignmentsSuspense<
	TData = Awaited<ReturnType<typeof getDailyAssignments>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getDailyAssignments>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getGetDailyAssignmentsSuspenseQueryOptions(options);

	const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * @summary Get Daily Assignment By Id
 */
export const getDailyAssignmentById = (
	params: GetDailyAssignmentByIdParams,
	signal?: AbortSignal
) => {
	return getAxios<DailyAssignmentForUserResponse>({
		url: `/client/assignments/daily-assignment`,
		method: "GET",
		params,
		signal,
	});
};

export const getGetDailyAssignmentByIdQueryKey = (params: GetDailyAssignmentByIdParams) => {
	return [`/client/assignments/daily-assignment`, ...(params ? [params] : [])] as const;
};

export const getGetDailyAssignmentByIdQueryOptions = <
	TData = Awaited<ReturnType<typeof getDailyAssignmentById>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params: GetDailyAssignmentByIdParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getDailyAssignmentById>>, TError, TData>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetDailyAssignmentByIdQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getDailyAssignmentById>>> = ({
		signal,
	}) => getDailyAssignmentById(params, signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getDailyAssignmentById>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetDailyAssignmentByIdQueryResult = NonNullable<
	Awaited<ReturnType<typeof getDailyAssignmentById>>
>;
export type GetDailyAssignmentByIdQueryError = ErrorType<HTTPValidationError>;

export function useGetDailyAssignmentById<
	TData = Awaited<ReturnType<typeof getDailyAssignmentById>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params: GetDailyAssignmentByIdParams,
	options: {
		query: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getDailyAssignmentById>>, TError, TData>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getDailyAssignmentById>>,
					TError,
					Awaited<ReturnType<typeof getDailyAssignmentById>>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetDailyAssignmentById<
	TData = Awaited<ReturnType<typeof getDailyAssignmentById>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params: GetDailyAssignmentByIdParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getDailyAssignmentById>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getDailyAssignmentById>>,
					TError,
					Awaited<ReturnType<typeof getDailyAssignmentById>>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetDailyAssignmentById<
	TData = Awaited<ReturnType<typeof getDailyAssignmentById>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params: GetDailyAssignmentByIdParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getDailyAssignmentById>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Daily Assignment By Id
 */

export function useGetDailyAssignmentById<
	TData = Awaited<ReturnType<typeof getDailyAssignmentById>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params: GetDailyAssignmentByIdParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getDailyAssignmentById>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getGetDailyAssignmentByIdQueryOptions(params, options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getGetDailyAssignmentByIdSuspenseQueryOptions = <
	TData = Awaited<ReturnType<typeof getDailyAssignmentById>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params: GetDailyAssignmentByIdParams,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof getDailyAssignmentById>>,
				TError,
				TData
			>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetDailyAssignmentByIdQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getDailyAssignmentById>>> = ({
		signal,
	}) => getDailyAssignmentById(params, signal);

	return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
		Awaited<ReturnType<typeof getDailyAssignmentById>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetDailyAssignmentByIdSuspenseQueryResult = NonNullable<
	Awaited<ReturnType<typeof getDailyAssignmentById>>
>;
export type GetDailyAssignmentByIdSuspenseQueryError = ErrorType<HTTPValidationError>;

export function useGetDailyAssignmentByIdSuspense<
	TData = Awaited<ReturnType<typeof getDailyAssignmentById>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params: GetDailyAssignmentByIdParams,
	options: {
		query: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof getDailyAssignmentById>>,
				TError,
				TData
			>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetDailyAssignmentByIdSuspense<
	TData = Awaited<ReturnType<typeof getDailyAssignmentById>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params: GetDailyAssignmentByIdParams,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof getDailyAssignmentById>>,
				TError,
				TData
			>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetDailyAssignmentByIdSuspense<
	TData = Awaited<ReturnType<typeof getDailyAssignmentById>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params: GetDailyAssignmentByIdParams,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof getDailyAssignmentById>>,
				TError,
				TData
			>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Daily Assignment By Id
 */

export function useGetDailyAssignmentByIdSuspense<
	TData = Awaited<ReturnType<typeof getDailyAssignmentById>>,
	TError = ErrorType<HTTPValidationError>,
>(
	params: GetDailyAssignmentByIdParams,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof getDailyAssignmentById>>,
				TError,
				TData
			>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getGetDailyAssignmentByIdSuspenseQueryOptions(params, options);

	const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * @summary Update Daily Assignment Status
 */
export const updateDailyAssignmentStatus = (params: UpdateDailyAssignmentStatusParams) => {
	return getAxios<DailyAssignmentForUserResponse>({
		url: `/client/assignments/daily-assignment`,
		method: "PATCH",
		params,
	});
};

export const getUpdateDailyAssignmentStatusMutationOptions = <
	TError = ErrorType<HTTPValidationError>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof updateDailyAssignmentStatus>>,
		TError,
		{ params: UpdateDailyAssignmentStatusParams },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof updateDailyAssignmentStatus>>,
	TError,
	{ params: UpdateDailyAssignmentStatusParams },
	TContext
> => {
	const mutationKey = ["updateDailyAssignmentStatus"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof updateDailyAssignmentStatus>>,
		{ params: UpdateDailyAssignmentStatusParams }
	> = props => {
		const { params } = props ?? {};

		return updateDailyAssignmentStatus(params);
	};

	return { mutationFn, ...mutationOptions };
};

export type UpdateDailyAssignmentStatusMutationResult = NonNullable<
	Awaited<ReturnType<typeof updateDailyAssignmentStatus>>
>;

export type UpdateDailyAssignmentStatusMutationError = ErrorType<HTTPValidationError>;

/**
 * @summary Update Daily Assignment Status
 */
export const useUpdateDailyAssignmentStatus = <
	TError = ErrorType<HTTPValidationError>,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof updateDailyAssignmentStatus>>,
			TError,
			{ params: UpdateDailyAssignmentStatusParams },
			TContext
		>;
	},
	queryClient?: QueryClient
): UseMutationResult<
	Awaited<ReturnType<typeof updateDailyAssignmentStatus>>,
	TError,
	{ params: UpdateDailyAssignmentStatusParams },
	TContext
> => {
	const mutationOptions = getUpdateDailyAssignmentStatusMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Get Daily Assignments And Reports
 */
export const getDailyAssignmentsAndReports = (signal?: AbortSignal) => {
	return getAxios<AssignmentReportResponse[]>({
		url: `/client/assignments/daily-assignments-and-reports`,
		method: "GET",
		signal,
	});
};

export const getGetDailyAssignmentsAndReportsQueryKey = () => {
	return [`/client/assignments/daily-assignments-and-reports`] as const;
};

export const getGetDailyAssignmentsAndReportsQueryOptions = <
	TData = Awaited<ReturnType<typeof getDailyAssignmentsAndReports>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof getDailyAssignmentsAndReports>>, TError, TData>
	>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetDailyAssignmentsAndReportsQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getDailyAssignmentsAndReports>>> = ({
		signal,
	}) => getDailyAssignmentsAndReports(signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getDailyAssignmentsAndReports>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetDailyAssignmentsAndReportsQueryResult = NonNullable<
	Awaited<ReturnType<typeof getDailyAssignmentsAndReports>>
>;
export type GetDailyAssignmentsAndReportsQueryError = ErrorType<unknown>;

export function useGetDailyAssignmentsAndReports<
	TData = Awaited<ReturnType<typeof getDailyAssignmentsAndReports>>,
	TError = ErrorType<unknown>,
>(
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getDailyAssignmentsAndReports>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getDailyAssignmentsAndReports>>,
					TError,
					Awaited<ReturnType<typeof getDailyAssignmentsAndReports>>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetDailyAssignmentsAndReports<
	TData = Awaited<ReturnType<typeof getDailyAssignmentsAndReports>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getDailyAssignmentsAndReports>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getDailyAssignmentsAndReports>>,
					TError,
					Awaited<ReturnType<typeof getDailyAssignmentsAndReports>>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetDailyAssignmentsAndReports<
	TData = Awaited<ReturnType<typeof getDailyAssignmentsAndReports>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getDailyAssignmentsAndReports>>,
				TError,
				TData
			>
		>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Daily Assignments And Reports
 */

export function useGetDailyAssignmentsAndReports<
	TData = Awaited<ReturnType<typeof getDailyAssignmentsAndReports>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getDailyAssignmentsAndReports>>,
				TError,
				TData
			>
		>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getGetDailyAssignmentsAndReportsQueryOptions(options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getGetDailyAssignmentsAndReportsSuspenseQueryOptions = <
	TData = Awaited<ReturnType<typeof getDailyAssignmentsAndReports>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseSuspenseQueryOptions<
			Awaited<ReturnType<typeof getDailyAssignmentsAndReports>>,
			TError,
			TData
		>
	>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetDailyAssignmentsAndReportsQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getDailyAssignmentsAndReports>>> = ({
		signal,
	}) => getDailyAssignmentsAndReports(signal);

	return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
		Awaited<ReturnType<typeof getDailyAssignmentsAndReports>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetDailyAssignmentsAndReportsSuspenseQueryResult = NonNullable<
	Awaited<ReturnType<typeof getDailyAssignmentsAndReports>>
>;
export type GetDailyAssignmentsAndReportsSuspenseQueryError = ErrorType<unknown>;

export function useGetDailyAssignmentsAndReportsSuspense<
	TData = Awaited<ReturnType<typeof getDailyAssignmentsAndReports>>,
	TError = ErrorType<unknown>,
>(
	options: {
		query: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof getDailyAssignmentsAndReports>>,
				TError,
				TData
			>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetDailyAssignmentsAndReportsSuspense<
	TData = Awaited<ReturnType<typeof getDailyAssignmentsAndReports>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof getDailyAssignmentsAndReports>>,
				TError,
				TData
			>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetDailyAssignmentsAndReportsSuspense<
	TData = Awaited<ReturnType<typeof getDailyAssignmentsAndReports>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof getDailyAssignmentsAndReports>>,
				TError,
				TData
			>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Daily Assignments And Reports
 */

export function useGetDailyAssignmentsAndReportsSuspense<
	TData = Awaited<ReturnType<typeof getDailyAssignmentsAndReports>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof getDailyAssignmentsAndReports>>,
				TError,
				TData
			>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getGetDailyAssignmentsAndReportsSuspenseQueryOptions(options);

	const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * @summary Get Daily Assignment And Report By Report Id
 */
export const getDailyAssignmentAndReportByReportId = (
	reportId: number | undefined | null,
	signal?: AbortSignal
) => {
	return getAxios<unknown>({ url: `/client/assignments/${reportId}`, method: "GET", signal });
};

export const getGetDailyAssignmentAndReportByReportIdQueryKey = (
	reportId: number | undefined | null
) => {
	return [`/client/assignments/${reportId}`] as const;
};

export const getGetDailyAssignmentAndReportByReportIdQueryOptions = <
	TData = Awaited<ReturnType<typeof getDailyAssignmentAndReportByReportId>>,
	TError = ErrorType<HTTPValidationError>,
>(
	reportId: number | undefined | null,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getDailyAssignmentAndReportByReportId>>,
				TError,
				TData
			>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getGetDailyAssignmentAndReportByReportIdQueryKey(reportId);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof getDailyAssignmentAndReportByReportId>>
	> = ({ signal }) => getDailyAssignmentAndReportByReportId(reportId, signal);

	return { queryKey, queryFn, enabled: !!reportId, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getDailyAssignmentAndReportByReportId>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetDailyAssignmentAndReportByReportIdQueryResult = NonNullable<
	Awaited<ReturnType<typeof getDailyAssignmentAndReportByReportId>>
>;
export type GetDailyAssignmentAndReportByReportIdQueryError = ErrorType<HTTPValidationError>;

export function useGetDailyAssignmentAndReportByReportId<
	TData = Awaited<ReturnType<typeof getDailyAssignmentAndReportByReportId>>,
	TError = ErrorType<HTTPValidationError>,
>(
	reportId: number | undefined | null,
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getDailyAssignmentAndReportByReportId>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getDailyAssignmentAndReportByReportId>>,
					TError,
					Awaited<ReturnType<typeof getDailyAssignmentAndReportByReportId>>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetDailyAssignmentAndReportByReportId<
	TData = Awaited<ReturnType<typeof getDailyAssignmentAndReportByReportId>>,
	TError = ErrorType<HTTPValidationError>,
>(
	reportId: number | undefined | null,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getDailyAssignmentAndReportByReportId>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getDailyAssignmentAndReportByReportId>>,
					TError,
					Awaited<ReturnType<typeof getDailyAssignmentAndReportByReportId>>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetDailyAssignmentAndReportByReportId<
	TData = Awaited<ReturnType<typeof getDailyAssignmentAndReportByReportId>>,
	TError = ErrorType<HTTPValidationError>,
>(
	reportId: number | undefined | null,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getDailyAssignmentAndReportByReportId>>,
				TError,
				TData
			>
		>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Daily Assignment And Report By Report Id
 */

export function useGetDailyAssignmentAndReportByReportId<
	TData = Awaited<ReturnType<typeof getDailyAssignmentAndReportByReportId>>,
	TError = ErrorType<HTTPValidationError>,
>(
	reportId: number | undefined | null,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getDailyAssignmentAndReportByReportId>>,
				TError,
				TData
			>
		>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getGetDailyAssignmentAndReportByReportIdQueryOptions(reportId, options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getGetDailyAssignmentAndReportByReportIdSuspenseQueryOptions = <
	TData = Awaited<ReturnType<typeof getDailyAssignmentAndReportByReportId>>,
	TError = ErrorType<HTTPValidationError>,
>(
	reportId: number | undefined | null,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof getDailyAssignmentAndReportByReportId>>,
				TError,
				TData
			>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getGetDailyAssignmentAndReportByReportIdQueryKey(reportId);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof getDailyAssignmentAndReportByReportId>>
	> = ({ signal }) => getDailyAssignmentAndReportByReportId(reportId, signal);

	return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
		Awaited<ReturnType<typeof getDailyAssignmentAndReportByReportId>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetDailyAssignmentAndReportByReportIdSuspenseQueryResult = NonNullable<
	Awaited<ReturnType<typeof getDailyAssignmentAndReportByReportId>>
>;
export type GetDailyAssignmentAndReportByReportIdSuspenseQueryError =
	ErrorType<HTTPValidationError>;

export function useGetDailyAssignmentAndReportByReportIdSuspense<
	TData = Awaited<ReturnType<typeof getDailyAssignmentAndReportByReportId>>,
	TError = ErrorType<HTTPValidationError>,
>(
	reportId: number | undefined | null,
	options: {
		query: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof getDailyAssignmentAndReportByReportId>>,
				TError,
				TData
			>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetDailyAssignmentAndReportByReportIdSuspense<
	TData = Awaited<ReturnType<typeof getDailyAssignmentAndReportByReportId>>,
	TError = ErrorType<HTTPValidationError>,
>(
	reportId: number | undefined | null,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof getDailyAssignmentAndReportByReportId>>,
				TError,
				TData
			>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetDailyAssignmentAndReportByReportIdSuspense<
	TData = Awaited<ReturnType<typeof getDailyAssignmentAndReportByReportId>>,
	TError = ErrorType<HTTPValidationError>,
>(
	reportId: number | undefined | null,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof getDailyAssignmentAndReportByReportId>>,
				TError,
				TData
			>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Daily Assignment And Report By Report Id
 */

export function useGetDailyAssignmentAndReportByReportIdSuspense<
	TData = Awaited<ReturnType<typeof getDailyAssignmentAndReportByReportId>>,
	TError = ErrorType<HTTPValidationError>,
>(
	reportId: number | undefined | null,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof getDailyAssignmentAndReportByReportId>>,
				TError,
				TData
			>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getGetDailyAssignmentAndReportByReportIdSuspenseQueryOptions(
		reportId,
		options
	);

	const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * @summary Update Daily Assignment
 */
export const updateDailyAssignment = (
	dailyAssignmentForUserUpdate: DailyAssignmentForUserUpdate,
	params: UpdateDailyAssignmentParams
) => {
	return getAxios<DailyAssignmentForUserResponse>({
		url: `/client/assignments/`,
		method: "PATCH",
		headers: { "Content-Type": "application/json" },
		data: dailyAssignmentForUserUpdate,
		params,
	});
};

export const getUpdateDailyAssignmentMutationOptions = <
	TError = ErrorType<HTTPValidationError>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof updateDailyAssignment>>,
		TError,
		{ data: DailyAssignmentForUserUpdate; params: UpdateDailyAssignmentParams },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof updateDailyAssignment>>,
	TError,
	{ data: DailyAssignmentForUserUpdate; params: UpdateDailyAssignmentParams },
	TContext
> => {
	const mutationKey = ["updateDailyAssignment"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof updateDailyAssignment>>,
		{ data: DailyAssignmentForUserUpdate; params: UpdateDailyAssignmentParams }
	> = props => {
		const { data, params } = props ?? {};

		return updateDailyAssignment(data, params);
	};

	return { mutationFn, ...mutationOptions };
};

export type UpdateDailyAssignmentMutationResult = NonNullable<
	Awaited<ReturnType<typeof updateDailyAssignment>>
>;
export type UpdateDailyAssignmentMutationBody = DailyAssignmentForUserUpdate;
export type UpdateDailyAssignmentMutationError = ErrorType<HTTPValidationError>;

/**
 * @summary Update Daily Assignment
 */
export const useUpdateDailyAssignment = <
	TError = ErrorType<HTTPValidationError>,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof updateDailyAssignment>>,
			TError,
			{ data: DailyAssignmentForUserUpdate; params: UpdateDailyAssignmentParams },
			TContext
		>;
	},
	queryClient?: QueryClient
): UseMutationResult<
	Awaited<ReturnType<typeof updateDailyAssignment>>,
	TError,
	{ data: DailyAssignmentForUserUpdate; params: UpdateDailyAssignmentParams },
	TContext
> => {
	const mutationOptions = getUpdateDailyAssignmentMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
