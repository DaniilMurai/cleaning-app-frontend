/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Neuer Standard API
 * OpenAPI spec version: 0.1.0
 */
import { useQuery, useSuspenseQuery } from "@tanstack/react-query";
import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseQueryResult,
	QueryClient,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseQueryOptions,
	UseQueryResult,
	UseSuspenseQueryOptions,
	UseSuspenseQueryResult,
} from "@tanstack/react-query";

import type { Root200 } from ".././schemas";

import { getAxios } from "../../instance";
import type { ErrorType } from "../../instance";

/**
 * @summary Root
 */
export const root = (signal?: AbortSignal) => {
	return getAxios<Root200>({ url: `/`, method: "GET", signal });
};

export const getRootQueryKey = () => {
	return [`/`] as const;
};

export const getRootQueryOptions = <
	TData = Awaited<ReturnType<typeof root>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof root>>, TError, TData>>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getRootQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof root>>> = ({ signal }) => root(signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof root>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type RootQueryResult = NonNullable<Awaited<ReturnType<typeof root>>>;
export type RootQueryError = ErrorType<unknown>;

export function useRoot<TData = Awaited<ReturnType<typeof root>>, TError = ErrorType<unknown>>(
	options: {
		query: Partial<UseQueryOptions<Awaited<ReturnType<typeof root>>, TError, TData>> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof root>>,
					TError,
					Awaited<ReturnType<typeof root>>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useRoot<TData = Awaited<ReturnType<typeof root>>, TError = ErrorType<unknown>>(
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof root>>, TError, TData>> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof root>>,
					TError,
					Awaited<ReturnType<typeof root>>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useRoot<TData = Awaited<ReturnType<typeof root>>, TError = ErrorType<unknown>>(
	options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof root>>, TError, TData>> },
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Root
 */

export function useRoot<TData = Awaited<ReturnType<typeof root>>, TError = ErrorType<unknown>>(
	options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof root>>, TError, TData>> },
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getRootQueryOptions(options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getRootSuspenseQueryOptions = <
	TData = Awaited<ReturnType<typeof root>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof root>>, TError, TData>>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getRootQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof root>>> = ({ signal }) => root(signal);

	return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
		Awaited<ReturnType<typeof root>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type RootSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof root>>>;
export type RootSuspenseQueryError = ErrorType<unknown>;

export function useRootSuspense<
	TData = Awaited<ReturnType<typeof root>>,
	TError = ErrorType<unknown>,
>(
	options: {
		query: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof root>>, TError, TData>>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useRootSuspense<
	TData = Awaited<ReturnType<typeof root>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof root>>, TError, TData>>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useRootSuspense<
	TData = Awaited<ReturnType<typeof root>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof root>>, TError, TData>>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Root
 */

export function useRootSuspense<
	TData = Awaited<ReturnType<typeof root>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof root>>, TError, TData>>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getRootSuspenseQueryOptions(options);

	const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}
