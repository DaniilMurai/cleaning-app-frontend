/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Neuer Standard API
 * OpenAPI spec version: 0.1.0
 */
import { useQuery, useSuspenseQuery } from "@tanstack/react-query";
import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseQueryResult,
	QueryClient,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseQueryOptions,
	UseQueryResult,
	UseSuspenseQueryOptions,
	UseSuspenseQueryResult,
} from "@tanstack/react-query";

import type { HTTPValidationError, HealthHeaders } from ".././schemas";

import { getAxios } from "../../instance";
import type { ErrorType } from "../../instance";

/**
 * @summary Health
 */
export const health = (headers?: HealthHeaders, signal?: AbortSignal) => {
	return getAxios<string>({ url: `/health`, method: "GET", headers, signal });
};

export const getHealthQueryKey = () => {
	return [`/health`] as const;
};

export const getHealthQueryOptions = <
	TData = Awaited<ReturnType<typeof health>>,
	TError = ErrorType<HTTPValidationError>,
>(
	headers?: HealthHeaders,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof health>>, TError, TData>>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getHealthQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof health>>> = ({ signal }) =>
		health(headers, signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof health>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type HealthQueryResult = NonNullable<Awaited<ReturnType<typeof health>>>;
export type HealthQueryError = ErrorType<HTTPValidationError>;

export function useHealth<
	TData = Awaited<ReturnType<typeof health>>,
	TError = ErrorType<HTTPValidationError>,
>(
	headers: undefined | HealthHeaders,
	options: {
		query: Partial<UseQueryOptions<Awaited<ReturnType<typeof health>>, TError, TData>> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof health>>,
					TError,
					Awaited<ReturnType<typeof health>>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useHealth<
	TData = Awaited<ReturnType<typeof health>>,
	TError = ErrorType<HTTPValidationError>,
>(
	headers?: HealthHeaders,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof health>>, TError, TData>> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof health>>,
					TError,
					Awaited<ReturnType<typeof health>>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useHealth<
	TData = Awaited<ReturnType<typeof health>>,
	TError = ErrorType<HTTPValidationError>,
>(
	headers?: HealthHeaders,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof health>>, TError, TData>>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Health
 */

export function useHealth<
	TData = Awaited<ReturnType<typeof health>>,
	TError = ErrorType<HTTPValidationError>,
>(
	headers?: HealthHeaders,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof health>>, TError, TData>>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getHealthQueryOptions(headers, options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getHealthSuspenseQueryOptions = <
	TData = Awaited<ReturnType<typeof health>>,
	TError = ErrorType<HTTPValidationError>,
>(
	headers?: HealthHeaders,
	options?: {
		query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof health>>, TError, TData>>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getHealthQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof health>>> = ({ signal }) =>
		health(headers, signal);

	return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
		Awaited<ReturnType<typeof health>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type HealthSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof health>>>;
export type HealthSuspenseQueryError = ErrorType<HTTPValidationError>;

export function useHealthSuspense<
	TData = Awaited<ReturnType<typeof health>>,
	TError = ErrorType<HTTPValidationError>,
>(
	headers: undefined | HealthHeaders,
	options: {
		query: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof health>>, TError, TData>>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useHealthSuspense<
	TData = Awaited<ReturnType<typeof health>>,
	TError = ErrorType<HTTPValidationError>,
>(
	headers?: HealthHeaders,
	options?: {
		query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof health>>, TError, TData>>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useHealthSuspense<
	TData = Awaited<ReturnType<typeof health>>,
	TError = ErrorType<HTTPValidationError>,
>(
	headers?: HealthHeaders,
	options?: {
		query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof health>>, TError, TData>>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Health
 */

export function useHealthSuspense<
	TData = Awaited<ReturnType<typeof health>>,
	TError = ErrorType<HTTPValidationError>,
>(
	headers?: HealthHeaders,
	options?: {
		query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof health>>, TError, TData>>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getHealthSuspenseQueryOptions(headers, options);

	const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}
