/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Neuer Standard Users API
 * OpenAPI spec version: 0.1.0
 */
import { useMutation, useQuery, useSuspenseQuery } from "@tanstack/react-query";
import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseQueryResult,
	MutationFunction,
	QueryClient,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
	UseSuspenseQueryOptions,
	UseSuspenseQueryResult,
} from "@tanstack/react-query";

import type {
	DailyAssignmentForUserResponse,
	HTTPValidationError,
	SuccessResponse,
	UpdateUserData,
	UserSchema,
	UserUpdatePassword,
} from ".././schemas";

import { getAxios } from "../../instance";
import type { ErrorType } from "../../instance";

/**
 * @summary Get Current User
 */
export const getCurrentUser = (signal?: AbortSignal) => {
	return getAxios<UserSchema>({ url: `/users/me`, method: "GET", signal });
};

export const getGetCurrentUserQueryKey = () => {
	return [`/users/me`] as const;
};

export const getGetCurrentUserQueryOptions = <
	TData = Awaited<ReturnType<typeof getCurrentUser>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData>>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetCurrentUserQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getCurrentUser>>> = ({ signal }) =>
		getCurrentUser(signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getCurrentUser>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCurrentUserQueryResult = NonNullable<Awaited<ReturnType<typeof getCurrentUser>>>;
export type GetCurrentUserQueryError = ErrorType<unknown>;

export function useGetCurrentUser<
	TData = Awaited<ReturnType<typeof getCurrentUser>>,
	TError = ErrorType<unknown>,
>(
	options: {
		query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData>> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getCurrentUser>>,
					TError,
					Awaited<ReturnType<typeof getCurrentUser>>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetCurrentUser<
	TData = Awaited<ReturnType<typeof getCurrentUser>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getCurrentUser>>,
					TError,
					Awaited<ReturnType<typeof getCurrentUser>>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetCurrentUser<
	TData = Awaited<ReturnType<typeof getCurrentUser>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData>>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Current User
 */

export function useGetCurrentUser<
	TData = Awaited<ReturnType<typeof getCurrentUser>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData>>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getGetCurrentUserQueryOptions(options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getGetCurrentUserSuspenseQueryOptions = <
	TData = Awaited<ReturnType<typeof getCurrentUser>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseSuspenseQueryOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData>
	>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetCurrentUserQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getCurrentUser>>> = ({ signal }) =>
		getCurrentUser(signal);

	return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
		Awaited<ReturnType<typeof getCurrentUser>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCurrentUserSuspenseQueryResult = NonNullable<
	Awaited<ReturnType<typeof getCurrentUser>>
>;
export type GetCurrentUserSuspenseQueryError = ErrorType<unknown>;

export function useGetCurrentUserSuspense<
	TData = Awaited<ReturnType<typeof getCurrentUser>>,
	TError = ErrorType<unknown>,
>(
	options: {
		query: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetCurrentUserSuspense<
	TData = Awaited<ReturnType<typeof getCurrentUser>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetCurrentUserSuspense<
	TData = Awaited<ReturnType<typeof getCurrentUser>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Current User
 */

export function useGetCurrentUserSuspense<
	TData = Awaited<ReturnType<typeof getCurrentUser>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getGetCurrentUserSuspenseQueryOptions(options);

	const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * @summary Update Current User
 */
export const updateCurrentUser = (updateUserData: UpdateUserData, signal?: AbortSignal) => {
	return getAxios<UserSchema>({
		url: `/users/me`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: updateUserData,
		signal,
	});
};

export const getUpdateCurrentUserMutationOptions = <
	TError = ErrorType<HTTPValidationError>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof updateCurrentUser>>,
		TError,
		{ data: UpdateUserData },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof updateCurrentUser>>,
	TError,
	{ data: UpdateUserData },
	TContext
> => {
	const mutationKey = ["updateCurrentUser"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof updateCurrentUser>>,
		{ data: UpdateUserData }
	> = props => {
		const { data } = props ?? {};

		return updateCurrentUser(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type UpdateCurrentUserMutationResult = NonNullable<
	Awaited<ReturnType<typeof updateCurrentUser>>
>;
export type UpdateCurrentUserMutationBody = UpdateUserData;
export type UpdateCurrentUserMutationError = ErrorType<HTTPValidationError>;

/**
 * @summary Update Current User
 */
export const useUpdateCurrentUser = <TError = ErrorType<HTTPValidationError>, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof updateCurrentUser>>,
			TError,
			{ data: UpdateUserData },
			TContext
		>;
	},
	queryClient?: QueryClient
): UseMutationResult<
	Awaited<ReturnType<typeof updateCurrentUser>>,
	TError,
	{ data: UpdateUserData },
	TContext
> => {
	const mutationOptions = getUpdateCurrentUserMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Change Password
 */
export const changePassword = (userUpdatePassword: UserUpdatePassword, signal?: AbortSignal) => {
	return getAxios<SuccessResponse>({
		url: `/users/change_password`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: userUpdatePassword,
		signal,
	});
};

export const getChangePasswordMutationOptions = <
	TError = ErrorType<HTTPValidationError>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof changePassword>>,
		TError,
		{ data: UserUpdatePassword },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof changePassword>>,
	TError,
	{ data: UserUpdatePassword },
	TContext
> => {
	const mutationKey = ["changePassword"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof changePassword>>,
		{ data: UserUpdatePassword }
	> = props => {
		const { data } = props ?? {};

		return changePassword(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type ChangePasswordMutationResult = NonNullable<Awaited<ReturnType<typeof changePassword>>>;
export type ChangePasswordMutationBody = UserUpdatePassword;
export type ChangePasswordMutationError = ErrorType<HTTPValidationError>;

/**
 * @summary Change Password
 */
export const useChangePassword = <TError = ErrorType<HTTPValidationError>, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof changePassword>>,
			TError,
			{ data: UserUpdatePassword },
			TContext
		>;
	},
	queryClient?: QueryClient
): UseMutationResult<
	Awaited<ReturnType<typeof changePassword>>,
	TError,
	{ data: UserUpdatePassword },
	TContext
> => {
	const mutationOptions = getChangePasswordMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Get Daily Assignment
 */
export const getDailyAssignment = (signal?: AbortSignal) => {
	return getAxios<DailyAssignmentForUserResponse[]>({
		url: `/users/daily-assignment`,
		method: "GET",
		signal,
	});
};

export const getGetDailyAssignmentQueryKey = () => {
	return [`/users/daily-assignment`] as const;
};

export const getGetDailyAssignmentQueryOptions = <
	TData = Awaited<ReturnType<typeof getDailyAssignment>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDailyAssignment>>, TError, TData>>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetDailyAssignmentQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getDailyAssignment>>> = ({ signal }) =>
		getDailyAssignment(signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getDailyAssignment>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetDailyAssignmentQueryResult = NonNullable<
	Awaited<ReturnType<typeof getDailyAssignment>>
>;
export type GetDailyAssignmentQueryError = ErrorType<unknown>;

export function useGetDailyAssignment<
	TData = Awaited<ReturnType<typeof getDailyAssignment>>,
	TError = ErrorType<unknown>,
>(
	options: {
		query: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getDailyAssignment>>, TError, TData>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getDailyAssignment>>,
					TError,
					Awaited<ReturnType<typeof getDailyAssignment>>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetDailyAssignment<
	TData = Awaited<ReturnType<typeof getDailyAssignment>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getDailyAssignment>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getDailyAssignment>>,
					TError,
					Awaited<ReturnType<typeof getDailyAssignment>>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetDailyAssignment<
	TData = Awaited<ReturnType<typeof getDailyAssignment>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getDailyAssignment>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Daily Assignment
 */

export function useGetDailyAssignment<
	TData = Awaited<ReturnType<typeof getDailyAssignment>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getDailyAssignment>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getGetDailyAssignmentQueryOptions(options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getGetDailyAssignmentSuspenseQueryOptions = <
	TData = Awaited<ReturnType<typeof getDailyAssignment>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseSuspenseQueryOptions<Awaited<ReturnType<typeof getDailyAssignment>>, TError, TData>
	>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetDailyAssignmentQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getDailyAssignment>>> = ({ signal }) =>
		getDailyAssignment(signal);

	return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
		Awaited<ReturnType<typeof getDailyAssignment>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetDailyAssignmentSuspenseQueryResult = NonNullable<
	Awaited<ReturnType<typeof getDailyAssignment>>
>;
export type GetDailyAssignmentSuspenseQueryError = ErrorType<unknown>;

export function useGetDailyAssignmentSuspense<
	TData = Awaited<ReturnType<typeof getDailyAssignment>>,
	TError = ErrorType<unknown>,
>(
	options: {
		query: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getDailyAssignment>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetDailyAssignmentSuspense<
	TData = Awaited<ReturnType<typeof getDailyAssignment>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getDailyAssignment>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetDailyAssignmentSuspense<
	TData = Awaited<ReturnType<typeof getDailyAssignment>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getDailyAssignment>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Daily Assignment
 */

export function useGetDailyAssignmentSuspense<
	TData = Awaited<ReturnType<typeof getDailyAssignment>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof getDailyAssignment>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getGetDailyAssignmentSuspenseQueryOptions(options);

	const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}
